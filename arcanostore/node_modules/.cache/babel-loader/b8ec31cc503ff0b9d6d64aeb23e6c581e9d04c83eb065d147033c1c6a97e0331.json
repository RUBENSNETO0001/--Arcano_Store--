{"ast":null,"code":"import { willOpenKeyboard as $21f1aa98acb08317$export$c57958e35f31ed73 } from \"./keyboard.mjs\";\nimport { useState as $fuDHA$useState, useEffect as $fuDHA$useEffect } from \"react\";\nimport { useIsSSR as $fuDHA$useIsSSR } from \"@react-aria/ssr\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet $5df64b3807dc15ee$var$visualViewport = typeof document !== 'undefined' && window.visualViewport;\nfunction $5df64b3807dc15ee$export$d699905dd57c73ca() {\n  let isSSR = (0, $fuDHA$useIsSSR)();\n  let [size, setSize] = (0, $fuDHA$useState)(() => isSSR ? {\n    width: 0,\n    height: 0\n  } : $5df64b3807dc15ee$var$getViewportSize());\n  (0, $fuDHA$useEffect)(() => {\n    // Use visualViewport api to track available height even on iOS virtual keyboard opening\n    let onResize = () => {\n      // Ignore updates when zoomed.\n      if ($5df64b3807dc15ee$var$visualViewport && $5df64b3807dc15ee$var$visualViewport.scale > 1) return;\n      setSize(size => {\n        let newSize = $5df64b3807dc15ee$var$getViewportSize();\n        if (newSize.width === size.width && newSize.height === size.height) return size;\n        return newSize;\n      });\n    };\n    // When closing the keyboard, iOS does not fire the visual viewport resize event until the animation is complete.\n    // We can anticipate this and resize early by handling the blur event and using the layout size.\n    let frame;\n    let onBlur = e => {\n      if ($5df64b3807dc15ee$var$visualViewport && $5df64b3807dc15ee$var$visualViewport.scale > 1) return;\n      if ((0, $21f1aa98acb08317$export$c57958e35f31ed73)(e.target))\n        // Wait one frame to see if a new element gets focused.\n        frame = requestAnimationFrame(() => {\n          if (!document.activeElement || !(0, $21f1aa98acb08317$export$c57958e35f31ed73)(document.activeElement)) setSize(size => {\n            let newSize = {\n              width: window.innerWidth,\n              height: window.innerHeight\n            };\n            if (newSize.width === size.width && newSize.height === size.height) return size;\n            return newSize;\n          });\n        });\n    };\n    window.addEventListener('blur', onBlur, true);\n    if (!$5df64b3807dc15ee$var$visualViewport) window.addEventListener('resize', onResize);else $5df64b3807dc15ee$var$visualViewport.addEventListener('resize', onResize);\n    return () => {\n      cancelAnimationFrame(frame);\n      window.removeEventListener('blur', onBlur, true);\n      if (!$5df64b3807dc15ee$var$visualViewport) window.removeEventListener('resize', onResize);else $5df64b3807dc15ee$var$visualViewport.removeEventListener('resize', onResize);\n    };\n  }, []);\n  return size;\n}\nfunction $5df64b3807dc15ee$var$getViewportSize() {\n  return {\n    // Multiply by the visualViewport scale to get the \"natural\" size, unaffected by pinch zooming.\n    width: $5df64b3807dc15ee$var$visualViewport ? $5df64b3807dc15ee$var$visualViewport.width * $5df64b3807dc15ee$var$visualViewport.scale : window.innerWidth,\n    height: $5df64b3807dc15ee$var$visualViewport ? $5df64b3807dc15ee$var$visualViewport.height * $5df64b3807dc15ee$var$visualViewport.scale : window.innerHeight\n  };\n}\nexport { $5df64b3807dc15ee$export$d699905dd57c73ca as useViewportSize };","map":{"version":3,"names":["$5df64b3807dc15ee$var$visualViewport","document","window","visualViewport","$5df64b3807dc15ee$export$d699905dd57c73ca","isSSR","$fuDHA$useIsSSR","size","setSize","$fuDHA$useState","width","height","$5df64b3807dc15ee$var$getViewportSize","$fuDHA$useEffect","onResize","scale","newSize","frame","onBlur","e","$21f1aa98acb08317$export$c57958e35f31ed73","target","requestAnimationFrame","activeElement","innerWidth","innerHeight","addEventListener","cancelAnimationFrame","removeEventListener"],"sources":["C:\\Users\\Aluno\\Documents\\GitHub\\--Arcano_Store--\\arcanostore\\node_modules\\@react-aria\\utils\\dist\\packages\\@react-aria\\utils\\src\\useViewportSize.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useEffect, useState} from 'react';\nimport {useIsSSR} from '@react-aria/ssr';\nimport {willOpenKeyboard} from './keyboard';\n\ninterface ViewportSize {\n  width: number,\n  height: number\n}\n\nlet visualViewport = typeof document !== 'undefined' && window.visualViewport;\n\nexport function useViewportSize(): ViewportSize {\n  let isSSR = useIsSSR();\n  let [size, setSize] = useState(() => isSSR ? {width: 0, height: 0} : getViewportSize());\n\n  useEffect(() => {\n    // Use visualViewport api to track available height even on iOS virtual keyboard opening\n    let onResize = () => {\n      // Ignore updates when zoomed.\n      if (visualViewport && visualViewport.scale > 1) {\n        return;\n      }\n\n      setSize(size => {\n        let newSize = getViewportSize();\n        if (newSize.width === size.width && newSize.height === size.height) {\n          return size;\n        }\n        return newSize;\n      });\n    };\n\n    // When closing the keyboard, iOS does not fire the visual viewport resize event until the animation is complete.\n    // We can anticipate this and resize early by handling the blur event and using the layout size.\n    let frame: number;\n    let onBlur = (e: FocusEvent) => {\n      if (visualViewport && visualViewport.scale > 1) {\n        return;\n      }\n\n      if (willOpenKeyboard(e.target as Element)) {\n        // Wait one frame to see if a new element gets focused.\n        frame = requestAnimationFrame(() => {\n          if (!document.activeElement || !willOpenKeyboard(document.activeElement)) {\n            setSize(size => {\n              let newSize = {width: window.innerWidth, height: window.innerHeight};\n              if (newSize.width === size.width && newSize.height === size.height) {\n                return size;\n              }\n              return newSize;\n            });\n          }\n        });\n      }\n    };\n\n    window.addEventListener('blur', onBlur, true);\n\n    if (!visualViewport) {\n      window.addEventListener('resize', onResize);\n    } else {\n      visualViewport.addEventListener('resize', onResize);\n    }\n\n    return () => {\n      cancelAnimationFrame(frame);\n      window.removeEventListener('blur', onBlur, true);\n      if (!visualViewport) {\n        window.removeEventListener('resize', onResize);\n      } else {\n        visualViewport.removeEventListener('resize', onResize);\n      }\n    };\n  }, []);\n\n  return size;\n}\n\nfunction getViewportSize(): ViewportSize {\n  return {\n    // Multiply by the visualViewport scale to get the \"natural\" size, unaffected by pinch zooming.\n    width: visualViewport ? visualViewport.width * visualViewport.scale : window.innerWidth,\n    height: visualViewport ? visualViewport.height * visualViewport.scale : window.innerHeight\n  };\n}\n"],"mappings":";;;;AAAA;;;;;;;;;;;;AAqBA,IAAIA,oCAAA,GAAiB,OAAOC,QAAA,KAAa,eAAeC,MAAA,CAAOC,cAAc;AAEtE,SAASC,0CAAA;EACd,IAAIC,KAAA,GAAQ,IAAAC,eAAO;EACnB,IAAI,CAACC,IAAA,EAAMC,OAAA,CAAQ,GAAG,IAAAC,eAAO,EAAE,MAAMJ,KAAA,GAAQ;IAACK,KAAA,EAAO;IAAGC,MAAA,EAAQ;EAAC,IAAIC,qCAAA;EAErE,IAAAC,gBAAQ,EAAE;IACR;IACA,IAAIC,QAAA,GAAWA,CAAA;MACb;MACA,IAAId,oCAAA,IAAkBA,oCAAA,CAAee,KAAK,GAAG,GAC3C;MAGFP,OAAA,CAAQD,IAAA;QACN,IAAIS,OAAA,GAAUJ,qCAAA;QACd,IAAII,OAAA,CAAQN,KAAK,KAAKH,IAAA,CAAKG,KAAK,IAAIM,OAAA,CAAQL,MAAM,KAAKJ,IAAA,CAAKI,MAAM,EAChE,OAAOJ,IAAA;QAET,OAAOS,OAAA;MACT;IACF;IAEA;IACA;IACA,IAAIC,KAAA;IACJ,IAAIC,MAAA,GAAUC,CAAA;MACZ,IAAInB,oCAAA,IAAkBA,oCAAA,CAAee,KAAK,GAAG,GAC3C;MAGF,IAAI,IAAAK,yCAAe,EAAED,CAAA,CAAEE,MAAM;QAC3B;QACAJ,KAAA,GAAQK,qBAAA,CAAsB;UAC5B,IAAI,CAACrB,QAAA,CAASsB,aAAa,IAAI,CAAC,IAAAH,yCAAe,EAAEnB,QAAA,CAASsB,aAAa,GACrEf,OAAA,CAAQD,IAAA;YACN,IAAIS,OAAA,GAAU;cAACN,KAAA,EAAOR,MAAA,CAAOsB,UAAU;cAAEb,MAAA,EAAQT,MAAA,CAAOuB;YAAW;YACnE,IAAIT,OAAA,CAAQN,KAAK,KAAKH,IAAA,CAAKG,KAAK,IAAIM,OAAA,CAAQL,MAAM,KAAKJ,IAAA,CAAKI,MAAM,EAChE,OAAOJ,IAAA;YAET,OAAOS,OAAA;UACT;QAEJ;IAEJ;IAEAd,MAAA,CAAOwB,gBAAgB,CAAC,QAAQR,MAAA,EAAQ;IAExC,IAAI,CAAClB,oCAAA,EACHE,MAAA,CAAOwB,gBAAgB,CAAC,UAAUZ,QAAA,OAElCd,oCAAA,CAAe0B,gBAAgB,CAAC,UAAUZ,QAAA;IAG5C,OAAO;MACLa,oBAAA,CAAqBV,KAAA;MACrBf,MAAA,CAAO0B,mBAAmB,CAAC,QAAQV,MAAA,EAAQ;MAC3C,IAAI,CAAClB,oCAAA,EACHE,MAAA,CAAO0B,mBAAmB,CAAC,UAAUd,QAAA,OAErCd,oCAAA,CAAe4B,mBAAmB,CAAC,UAAUd,QAAA;IAEjD;EACF,GAAG,EAAE;EAEL,OAAOP,IAAA;AACT;AAEA,SAASK,sCAAA;EACP,OAAO;IACL;IACAF,KAAA,EAAOV,oCAAA,GAAiBA,oCAAA,CAAeU,KAAK,GAAGV,oCAAA,CAAee,KAAK,GAAGb,MAAA,CAAOsB,UAAU;IACvFb,MAAA,EAAQX,oCAAA,GAAiBA,oCAAA,CAAeW,MAAM,GAAGX,oCAAA,CAAee,KAAK,GAAGb,MAAA,CAAOuB;EACjF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}