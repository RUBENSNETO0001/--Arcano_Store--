{"ast":null,"code":"import { useControlledState as $d8rik$useControlledState } from \"@react-stately/utils\";\nimport { useState as $d8rik$useState } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $3017fa7ffdddec74$export$8042c6c013fd5226(props = {}) {\n  let {\n    isReadOnly: isReadOnly\n  } = props;\n  // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  let [isSelected, setSelected] = (0, $d8rik$useControlledState)(props.isSelected, props.defaultSelected || false, props.onChange);\n  let [initialValue] = (0, $d8rik$useState)(isSelected);\n  function updateSelected(value) {\n    if (!isReadOnly) setSelected(value);\n  }\n  function toggleState() {\n    if (!isReadOnly) setSelected(!isSelected);\n  }\n  var _props_defaultSelected;\n  return {\n    isSelected: isSelected,\n    defaultSelected: (_props_defaultSelected = props.defaultSelected) !== null && _props_defaultSelected !== void 0 ? _props_defaultSelected : initialValue,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\nexport { $3017fa7ffdddec74$export$8042c6c013fd5226 as useToggleState };","map":{"version":3,"names":["$3017fa7ffdddec74$export$8042c6c013fd5226","props","isReadOnly","isSelected","setSelected","$d8rik$useControlledState","defaultSelected","onChange","initialValue","$d8rik$useState","updateSelected","value","toggleState","_props_defaultSelected","toggle"],"sources":["C:\\Users\\Aluno\\Documents\\GitHub\\--Arcano_Store--\\arcanostore\\node_modules\\@react-stately\\toggle\\dist\\packages\\@react-stately\\toggle\\src\\useToggleState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ToggleStateOptions} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\nimport {useState} from 'react';\n\nexport type {ToggleStateOptions};\n\nexport interface ToggleState {\n  /** Whether the toggle is selected. */\n  readonly isSelected: boolean,\n\n  /** Whether the toggle is selected by default. */\n  readonly defaultSelected: boolean,\n\n  /** Updates selection state. */\n  setSelected(isSelected: boolean): void,\n\n  /** Toggle the selection state. */\n  toggle(): void\n}\n\n/**\n * Provides state management for toggle components like checkboxes and switches.\n */\nexport function useToggleState(props: ToggleStateOptions = {}): ToggleState {\n  let {isReadOnly} = props;\n\n  // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, props.onChange);\n  let [initialValue] = useState(isSelected);\n\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n    }\n  }\n\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(!isSelected);\n    }\n  }\n\n  return {\n    isSelected,\n    defaultSelected: props.defaultSelected ?? initialValue,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;AAmCO,SAASA,0CAAeC,KAAA,GAA4B,CAAC,CAAC;EAC3D,IAAI;IAAAC,UAAA,EAACA;EAAU,CAAC,GAAGD,KAAA;EAEnB;EACA;EACA,IAAI,CAACE,UAAA,EAAYC,WAAA,CAAY,GAAG,IAAAC,yBAAiB,EAAEJ,KAAA,CAAME,UAAU,EAAEF,KAAA,CAAMK,eAAe,IAAI,OAAOL,KAAA,CAAMM,QAAQ;EACnH,IAAI,CAACC,YAAA,CAAa,GAAG,IAAAC,eAAO,EAAEN,UAAA;EAE9B,SAASO,eAAeC,KAAK;IAC3B,IAAI,CAACT,UAAA,EACHE,WAAA,CAAYO,KAAA;EAEhB;EAEA,SAASC,YAAA;IACP,IAAI,CAACV,UAAA,EACHE,WAAA,CAAY,CAACD,UAAA;EAEjB;MAImBU,sBAAA;EAFnB,OAAO;gBACLV,UAAA;IACAG,eAAA,EAAiB,CAAAO,sBAAA,GAAAZ,KAAA,CAAMK,eAAe,cAArBO,sBAAA,cAAAA,sBAAA,GAAyBL,YAAA;IAC1CJ,WAAA,EAAaM,cAAA;IACbI,MAAA,EAAQF;EACV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}