{"ast":null,"code":"import { useFormValidationState as $49BJP$useFormValidationState } from \"@react-stately/form\";\nimport { getChildNodes as $49BJP$getChildNodes } from \"@react-stately/collections\";\nimport { useSingleSelectListState as $49BJP$useSingleSelectListState, ListCollection as $49BJP$ListCollection } from \"@react-stately/list\";\nimport { useState as $49BJP$useState, useMemo as $49BJP$useMemo, useRef as $49BJP$useRef, useCallback as $49BJP$useCallback, useEffect as $49BJP$useEffect } from \"react\";\nimport { useControlledState as $49BJP$useControlledState } from \"@react-stately/utils\";\nimport { useOverlayTriggerState as $49BJP$useOverlayTriggerState } from \"@react-stately/overlays\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e(props) {\n  var _collection_getItem;\n  let {\n    defaultFilter: defaultFilter,\n    menuTrigger = 'input',\n    allowsEmptyCollection = false,\n    allowsCustomValue: allowsCustomValue,\n    shouldCloseOnBlur = true\n  } = props;\n  let [showAllItems, setShowAllItems] = (0, $49BJP$useState)(false);\n  let [isFocused, setFocusedState] = (0, $49BJP$useState)(false);\n  let [focusStrategy, setFocusStrategy] = (0, $49BJP$useState)(null);\n  let onSelectionChange = key => {\n    if (props.onSelectionChange) props.onSelectionChange(key);\n    // If key is the same, reset the inputValue and close the menu\n    // (scenario: user clicks on already selected option)\n    if (key === selectedKey) {\n      resetInputValue();\n      closeMenu();\n    }\n  };\n  var _props_items;\n  let {\n    collection: collection,\n    selectionManager: selectionManager,\n    selectedKey: selectedKey,\n    setSelectedKey: setSelectedKey,\n    selectedItem: selectedItem,\n    disabledKeys: disabledKeys\n  } = (0, $49BJP$useSingleSelectListState)({\n    ...props,\n    onSelectionChange: onSelectionChange,\n    items: (_props_items = props.items) !== null && _props_items !== void 0 ? _props_items : props.defaultItems\n  });\n  let [inputValue, setInputValue] = (0, $49BJP$useControlledState)(props.inputValue, $a9e7382a7d111cb5$var$getDefaultInputValue(props.defaultInputValue, selectedKey, collection) || '', props.onInputChange);\n  let [initialSelectedKey] = (0, $49BJP$useState)(selectedKey);\n  let [initialValue] = (0, $49BJP$useState)(inputValue);\n  // Preserve original collection so we can show all items on demand\n  let originalCollection = collection;\n  let filteredCollection = (0, $49BJP$useMemo)(() =>\n  // No default filter if items are controlled.\n  props.items != null || !defaultFilter ? collection : $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, defaultFilter), [collection, inputValue, defaultFilter, props.items]);\n  let [lastCollection, setLastCollection] = (0, $49BJP$useState)(filteredCollection);\n  // Track what action is attempting to open the menu\n  let menuOpenTrigger = (0, $49BJP$useRef)('focus');\n  let onOpenChange = open => {\n    if (props.onOpenChange) props.onOpenChange(open, open ? menuOpenTrigger.current : undefined);\n    selectionManager.setFocused(open);\n    if (!open) selectionManager.setFocusedKey(null);\n  };\n  let triggerState = (0, $49BJP$useOverlayTriggerState)({\n    ...props,\n    onOpenChange: onOpenChange,\n    isOpen: undefined,\n    defaultOpen: undefined\n  });\n  let open = (focusStrategy = null, trigger) => {\n    let displayAllItems = trigger === 'manual' || trigger === 'focus' && menuTrigger === 'focus';\n    // Prevent open operations from triggering if there is nothing to display\n    // Also prevent open operations from triggering if items are uncontrolled but defaultItems is empty, even if displayAllItems is true.\n    // This is to prevent comboboxes with empty defaultItems from opening but allow controlled items comboboxes to open even if the inital list is empty (assumption is user will provide swap the empty list with a base list via onOpenChange returning `menuTrigger` manual)\n    if (allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) {\n      if (displayAllItems && !triggerState.isOpen && props.items === undefined)\n        // Show all items if menu is manually opened. Only care about this if items are undefined\n        setShowAllItems(true);\n      menuOpenTrigger.current = trigger;\n      setFocusStrategy(focusStrategy);\n      triggerState.open();\n    }\n  };\n  let toggle = (focusStrategy = null, trigger) => {\n    let displayAllItems = trigger === 'manual' || trigger === 'focus' && menuTrigger === 'focus';\n    // If the menu is closed and there is nothing to display, early return so toggle isn't called to prevent extraneous onOpenChange\n    if (!(allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) && !triggerState.isOpen) return;\n    if (displayAllItems && !triggerState.isOpen && props.items === undefined)\n      // Show all items if menu is toggled open. Only care about this if items are undefined\n      setShowAllItems(true);\n    // Only update the menuOpenTrigger if menu is currently closed\n    if (!triggerState.isOpen) menuOpenTrigger.current = trigger;\n    toggleMenu(focusStrategy);\n  };\n  let updateLastCollection = (0, $49BJP$useCallback)(() => {\n    setLastCollection(showAllItems ? originalCollection : filteredCollection);\n  }, [showAllItems, originalCollection, filteredCollection]);\n  // If menu is going to close, save the current collection so we can freeze the displayed collection when the\n  // user clicks outside the popover to close the menu. Prevents the menu contents from updating as the menu closes.\n  let toggleMenu = (0, $49BJP$useCallback)((focusStrategy = null) => {\n    if (triggerState.isOpen) updateLastCollection();\n    setFocusStrategy(focusStrategy);\n    triggerState.toggle();\n  }, [triggerState, updateLastCollection]);\n  let closeMenu = (0, $49BJP$useCallback)(() => {\n    if (triggerState.isOpen) {\n      updateLastCollection();\n      triggerState.close();\n    }\n  }, [triggerState, updateLastCollection]);\n  let [lastValue, setLastValue] = (0, $49BJP$useState)(inputValue);\n  let resetInputValue = () => {\n    var _collection_getItem;\n    var _collection_getItem_textValue;\n    let itemText = selectedKey != null ? (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '' : '';\n    setLastValue(itemText);\n    setInputValue(itemText);\n  };\n  var _props_selectedKey, _ref;\n  let lastSelectedKey = (0, $49BJP$useRef)((_ref = (_props_selectedKey = props.selectedKey) !== null && _props_selectedKey !== void 0 ? _props_selectedKey : props.defaultSelectedKey) !== null && _ref !== void 0 ? _ref : null);\n  var _collection_getItem_textValue;\n  let lastSelectedKeyText = (0, $49BJP$useRef)(selectedKey != null ? (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '' : '');\n  // intentional omit dependency array, want this to happen on every render\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  (0, $49BJP$useEffect)(() => {\n    var _collection_getItem;\n    // Open and close menu automatically when the input value changes if the input is focused,\n    // and there are items in the collection or allowEmptyCollection is true.\n    if (isFocused && (filteredCollection.size > 0 || allowsEmptyCollection) && !triggerState.isOpen && inputValue !== lastValue && menuTrigger !== 'manual') open(null, 'input');\n    // Close the menu if the collection is empty. Don't close menu if filtered collection size is 0\n    // but we are currently showing all items via button press\n    if (!showAllItems && !allowsEmptyCollection && triggerState.isOpen && filteredCollection.size === 0) closeMenu();\n    // Close when an item is selected.\n    if (selectedKey != null && selectedKey !== lastSelectedKey.current) closeMenu();\n    // Clear focused key when input value changes and display filtered collection again.\n    if (inputValue !== lastValue) {\n      selectionManager.setFocusedKey(null);\n      setShowAllItems(false);\n      // Set selectedKey to null when the user clears the input.\n      // If controlled, this is the application developer's responsibility.\n      if (inputValue === '' && (props.inputValue === undefined || props.selectedKey === undefined)) setSelectedKey(null);\n    }\n    // If the selectedKey changed, update the input value.\n    // Do nothing if both inputValue and selectedKey are controlled.\n    // In this case, it's the user's responsibility to update inputValue in onSelectionChange.\n    if (selectedKey !== lastSelectedKey.current && (props.inputValue === undefined || props.selectedKey === undefined)) resetInputValue();else if (lastValue !== inputValue) setLastValue(inputValue);\n    var _collection_getItem_textValue;\n    // Update the inputValue if the selected item's text changes from its last tracked value.\n    // This is to handle cases where a selectedKey is specified but the items aren't available (async loading) or the selected item's text value updates.\n    // Only reset if the user isn't currently within the field so we don't erroneously modify user input.\n    // If inputValue is controlled, it is the user's responsibility to update the inputValue when items change.\n    let selectedItemText = selectedKey != null ? (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '' : '';\n    if (!isFocused && selectedKey != null && props.inputValue === undefined && selectedKey === lastSelectedKey.current) {\n      if (lastSelectedKeyText.current !== selectedItemText) {\n        setLastValue(selectedItemText);\n        setInputValue(selectedItemText);\n      }\n    }\n    lastSelectedKey.current = selectedKey;\n    lastSelectedKeyText.current = selectedItemText;\n  });\n  let validation = (0, $49BJP$useFormValidationState)({\n    ...props,\n    value: (0, $49BJP$useMemo)(() => ({\n      inputValue: inputValue,\n      selectedKey: selectedKey\n    }), [inputValue, selectedKey])\n  });\n  // Revert input value and close menu\n  let revert = () => {\n    if (allowsCustomValue && selectedKey == null) commitCustomValue();else commitSelection();\n  };\n  let commitCustomValue = () => {\n    lastSelectedKey.current = null;\n    setSelectedKey(null);\n    closeMenu();\n  };\n  let commitSelection = () => {\n    // If multiple things are controlled, call onSelectionChange\n    if (props.selectedKey !== undefined && props.inputValue !== undefined) {\n      var _props_onSelectionChange, _collection_getItem;\n      (_props_onSelectionChange = props.onSelectionChange) === null || _props_onSelectionChange === void 0 ? void 0 : _props_onSelectionChange.call(props, selectedKey);\n      var _collection_getItem_textValue;\n      // Stop menu from reopening from useEffect\n      let itemText = selectedKey != null ? (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '' : '';\n      setLastValue(itemText);\n      closeMenu();\n    } else {\n      // If only a single aspect of combobox is controlled, reset input value and close menu for the user\n      resetInputValue();\n      closeMenu();\n    }\n  };\n  const commitValue = () => {\n    if (allowsCustomValue) {\n      var _collection_getItem;\n      var _collection_getItem_textValue;\n      const itemText = selectedKey != null ? (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '' : '';\n      inputValue === itemText ? commitSelection() : commitCustomValue();\n    } else\n      // Reset inputValue and close menu\n      commitSelection();\n  };\n  let commit = () => {\n    if (triggerState.isOpen && selectionManager.focusedKey != null) {\n      // Reset inputValue and close menu here if the selected key is already the focused key. Otherwise\n      // fire onSelectionChange to allow the application to control the closing.\n      if (selectedKey === selectionManager.focusedKey) commitSelection();else setSelectedKey(selectionManager.focusedKey);\n    } else commitValue();\n  };\n  let valueOnFocus = (0, $49BJP$useRef)(inputValue);\n  let setFocused = isFocused => {\n    if (isFocused) {\n      valueOnFocus.current = inputValue;\n      if (menuTrigger === 'focus' && !props.isReadOnly) open(null, 'focus');\n    } else {\n      if (shouldCloseOnBlur) commitValue();\n      if (inputValue !== valueOnFocus.current) validation.commitValidation();\n    }\n    setFocusedState(isFocused);\n  };\n  let displayedCollection = (0, $49BJP$useMemo)(() => {\n    if (triggerState.isOpen) {\n      if (showAllItems) return originalCollection;else return filteredCollection;\n    } else return lastCollection;\n  }, [triggerState.isOpen, originalCollection, filteredCollection, showAllItems, lastCollection]);\n  var _props_defaultSelectedKey;\n  let defaultSelectedKey = (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : initialSelectedKey;\n  var _getDefaultInputValue;\n  return {\n    ...validation,\n    ...triggerState,\n    focusStrategy: focusStrategy,\n    toggle: toggle,\n    open: open,\n    close: commitValue,\n    selectionManager: selectionManager,\n    selectedKey: selectedKey,\n    defaultSelectedKey: defaultSelectedKey,\n    setSelectedKey: setSelectedKey,\n    disabledKeys: disabledKeys,\n    isFocused: isFocused,\n    setFocused: setFocused,\n    selectedItem: selectedItem,\n    collection: displayedCollection,\n    inputValue: inputValue,\n    defaultInputValue: (_getDefaultInputValue = $a9e7382a7d111cb5$var$getDefaultInputValue(props.defaultInputValue, defaultSelectedKey, collection)) !== null && _getDefaultInputValue !== void 0 ? _getDefaultInputValue : initialValue,\n    setInputValue: setInputValue,\n    commit: commit,\n    revert: revert\n  };\n}\nfunction $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, filter) {\n  return new (0, $49BJP$ListCollection)($a9e7382a7d111cb5$var$filterNodes(collection, collection, inputValue, filter));\n}\nfunction $a9e7382a7d111cb5$var$filterNodes(collection, nodes, inputValue, filter) {\n  let filteredNode = [];\n  for (let node of nodes) {\n    if (node.type === 'section' && node.hasChildNodes) {\n      let filtered = $a9e7382a7d111cb5$var$filterNodes(collection, (0, $49BJP$getChildNodes)(node, collection), inputValue, filter);\n      if ([...filtered].some(node => node.type === 'item')) filteredNode.push({\n        ...node,\n        childNodes: filtered\n      });\n    } else if (node.type === 'item' && filter(node.textValue, inputValue)) filteredNode.push({\n      ...node\n    });else if (node.type !== 'item') filteredNode.push({\n      ...node\n    });\n  }\n  return filteredNode;\n}\nfunction $a9e7382a7d111cb5$var$getDefaultInputValue(defaultInputValue, selectedKey, collection) {\n  if (defaultInputValue == null) {\n    var _collection_getItem;\n    var _collection_getItem_textValue;\n    if (selectedKey != null) return (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '';\n  }\n  return defaultInputValue;\n}\nexport { $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e as useComboBoxState };","map":{"version":3,"names":["$a9e7382a7d111cb5$export$b453a3bfd4a5fa9e","props","_collection_getItem","defaultFilter","menuTrigger","allowsEmptyCollection","allowsCustomValue","shouldCloseOnBlur","showAllItems","setShowAllItems","$49BJP$useState","isFocused","setFocusedState","focusStrategy","setFocusStrategy","onSelectionChange","key","selectedKey","resetInputValue","closeMenu","_props_items","collection","selectionManager","setSelectedKey","selectedItem","disabledKeys","$49BJP$useSingleSelectListState","items","defaultItems","inputValue","setInputValue","$49BJP$useControlledState","$a9e7382a7d111cb5$var$getDefaultInputValue","defaultInputValue","onInputChange","initialSelectedKey","initialValue","originalCollection","filteredCollection","$49BJP$useMemo","$a9e7382a7d111cb5$var$filterCollection","lastCollection","setLastCollection","menuOpenTrigger","$49BJP$useRef","onOpenChange","open","current","undefined","setFocused","setFocusedKey","triggerState","$49BJP$useOverlayTriggerState","isOpen","defaultOpen","trigger","displayAllItems","size","toggle","toggleMenu","updateLastCollection","$49BJP$useCallback","close","lastValue","setLastValue","_collection_getItem_textValue","itemText","getItem","textValue","_props_selectedKey","_ref","lastSelectedKey","defaultSelectedKey","lastSelectedKeyText","$49BJP$useEffect","selectedItemText","validation","$49BJP$useFormValidationState","value","revert","commitCustomValue","commitSelection","_props_onSelectionChange","call","commitValue","commit","focusedKey","valueOnFocus","isReadOnly","commitValidation","displayedCollection","_props_defaultSelectedKey","_getDefaultInputValue","filter","$49BJP$ListCollection","$a9e7382a7d111cb5$var$filterNodes","nodes","filteredNode","node","type","hasChildNodes","filtered","$49BJP$getChildNodes","some","push","childNodes"],"sources":["C:\\Users\\Aluno\\Documents\\GitHub\\--Arcano_Store--\\arcanostore\\node_modules\\@react-stately\\combobox\\dist\\packages\\@react-stately\\combobox\\src\\useComboBoxState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionStateBase, FocusStrategy, Key, Node} from '@react-types/shared';\nimport {ComboBoxProps, MenuTriggerAction} from '@react-types/combobox';\nimport {FormValidationState, useFormValidationState} from '@react-stately/form';\nimport {getChildNodes} from '@react-stately/collections';\nimport {ListCollection, useSingleSelectListState} from '@react-stately/list';\nimport {SelectState} from '@react-stately/select';\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport {useControlledState} from '@react-stately/utils';\nimport {useOverlayTriggerState} from '@react-stately/overlays';\n\nexport interface ComboBoxState<T> extends SelectState<T>, FormValidationState{\n  /** The current value of the combo box input. */\n  inputValue: string,\n  /** The default value of the combo box input. */\n  defaultInputValue: string,\n  /** Sets the value of the combo box input. */\n  setInputValue(value: string): void,\n  /** Selects the currently focused item and updates the input value. */\n  commit(): void,\n  /** Controls which item will be auto focused when the menu opens. */\n  readonly focusStrategy: FocusStrategy | null,\n  /** Opens the menu. */\n  open(focusStrategy?: FocusStrategy | null, trigger?: MenuTriggerAction): void,\n  /** Toggles the menu. */\n  toggle(focusStrategy?: FocusStrategy | null, trigger?: MenuTriggerAction): void,\n  /** Resets the input value to the previously selected item's text if any and closes the menu.  */\n  revert(): void\n}\n\ntype FilterFn = (textValue: string, inputValue: string) => boolean;\n\nexport interface ComboBoxStateOptions<T> extends Omit<ComboBoxProps<T>, 'children'>, CollectionStateBase<T> {\n  /** The filter function used to determine if a option should be included in the combo box list. */\n  defaultFilter?: FilterFn,\n  /** Whether the combo box allows the menu to be open when the collection is empty. */\n  allowsEmptyCollection?: boolean,\n  /** Whether the combo box menu should close on blur. */\n  shouldCloseOnBlur?: boolean\n}\n\n/**\n * Provides state management for a combo box component. Handles building a collection\n * of items from props and manages the option selection state of the combo box. In addition, it tracks the input value,\n * focus state, and other properties of the combo box.\n */\nexport function useComboBoxState<T extends object>(props: ComboBoxStateOptions<T>): ComboBoxState<T> {\n  let {\n    defaultFilter,\n    menuTrigger = 'input',\n    allowsEmptyCollection = false,\n    allowsCustomValue,\n    shouldCloseOnBlur = true\n  } = props;\n\n  let [showAllItems, setShowAllItems] = useState(false);\n  let [isFocused, setFocusedState] = useState(false);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy | null>(null);\n\n  let onSelectionChange = (key) => {\n    if (props.onSelectionChange) {\n      props.onSelectionChange(key);\n    }\n\n    // If key is the same, reset the inputValue and close the menu\n    // (scenario: user clicks on already selected option)\n    if (key === selectedKey) {\n      resetInputValue();\n      closeMenu();\n    }\n  };\n\n  let {collection,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem,\n    disabledKeys\n  } = useSingleSelectListState({\n    ...props,\n    onSelectionChange,\n    items: props.items ?? props.defaultItems\n  });\n\n  let [inputValue, setInputValue] = useControlledState(\n    props.inputValue,\n    getDefaultInputValue(props.defaultInputValue, selectedKey, collection) || '',\n    props.onInputChange\n  );\n  let [initialSelectedKey] = useState(selectedKey);\n  let [initialValue] = useState(inputValue);\n\n  // Preserve original collection so we can show all items on demand\n  let originalCollection = collection;\n  let filteredCollection = useMemo(() => (\n    // No default filter if items are controlled.\n    props.items != null || !defaultFilter\n      ? collection\n      : filterCollection(collection, inputValue, defaultFilter)\n  ), [collection, inputValue, defaultFilter, props.items]);\n  let [lastCollection, setLastCollection] = useState(filteredCollection);\n\n  // Track what action is attempting to open the menu\n  let menuOpenTrigger = useRef<MenuTriggerAction | undefined>('focus');\n  let onOpenChange = (open: boolean) => {\n    if (props.onOpenChange) {\n      props.onOpenChange(open, open ? menuOpenTrigger.current : undefined);\n    }\n\n    selectionManager.setFocused(open);\n    if (!open) {\n      selectionManager.setFocusedKey(null);\n    }\n  };\n\n  let triggerState = useOverlayTriggerState({...props, onOpenChange, isOpen: undefined, defaultOpen: undefined});\n  let open = (focusStrategy: FocusStrategy | null = null, trigger?: MenuTriggerAction) => {\n    let displayAllItems = (trigger === 'manual' || (trigger === 'focus' && menuTrigger === 'focus'));\n    // Prevent open operations from triggering if there is nothing to display\n    // Also prevent open operations from triggering if items are uncontrolled but defaultItems is empty, even if displayAllItems is true.\n    // This is to prevent comboboxes with empty defaultItems from opening but allow controlled items comboboxes to open even if the inital list is empty (assumption is user will provide swap the empty list with a base list via onOpenChange returning `menuTrigger` manual)\n    if (allowsEmptyCollection || filteredCollection.size > 0 || (displayAllItems && originalCollection.size > 0) || props.items) {\n      if (displayAllItems && !triggerState.isOpen && props.items === undefined) {\n        // Show all items if menu is manually opened. Only care about this if items are undefined\n        setShowAllItems(true);\n      }\n\n      menuOpenTrigger.current = trigger;\n      setFocusStrategy(focusStrategy);\n      triggerState.open();\n    }\n  };\n\n  let toggle = (focusStrategy: FocusStrategy | null = null, trigger?: MenuTriggerAction) => {\n    let displayAllItems = (trigger === 'manual' || (trigger === 'focus' && menuTrigger === 'focus'));\n    // If the menu is closed and there is nothing to display, early return so toggle isn't called to prevent extraneous onOpenChange\n    if (!(allowsEmptyCollection || filteredCollection.size > 0 || (displayAllItems && originalCollection.size > 0) || props.items) && !triggerState.isOpen) {\n      return;\n    }\n\n    if (displayAllItems && !triggerState.isOpen && props.items === undefined) {\n      // Show all items if menu is toggled open. Only care about this if items are undefined\n      setShowAllItems(true);\n    }\n\n    // Only update the menuOpenTrigger if menu is currently closed\n    if (!triggerState.isOpen) {\n      menuOpenTrigger.current = trigger;\n    }\n\n    toggleMenu(focusStrategy);\n  };\n\n  let updateLastCollection = useCallback(() => {\n    setLastCollection(showAllItems ? originalCollection : filteredCollection);\n  }, [showAllItems, originalCollection, filteredCollection]);\n\n  // If menu is going to close, save the current collection so we can freeze the displayed collection when the\n  // user clicks outside the popover to close the menu. Prevents the menu contents from updating as the menu closes.\n  let toggleMenu = useCallback((focusStrategy: FocusStrategy | null = null) => {\n    if (triggerState.isOpen) {\n      updateLastCollection();\n    }\n\n    setFocusStrategy(focusStrategy);\n    triggerState.toggle();\n  }, [triggerState, updateLastCollection]);\n\n  let closeMenu = useCallback(() => {\n    if (triggerState.isOpen) {\n      updateLastCollection();\n      triggerState.close();\n    }\n  }, [triggerState, updateLastCollection]);\n\n  let [lastValue, setLastValue] = useState(inputValue);\n  let resetInputValue = () => {\n    let itemText = selectedKey != null ? collection.getItem(selectedKey)?.textValue ?? '' : '';\n    setLastValue(itemText);\n    setInputValue(itemText);\n  };\n\n  let lastSelectedKey = useRef(props.selectedKey ?? props.defaultSelectedKey ?? null);\n  let lastSelectedKeyText = useRef(\n    selectedKey != null ? collection.getItem(selectedKey)?.textValue ?? '' : ''\n  );\n  // intentional omit dependency array, want this to happen on every render\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    // Open and close menu automatically when the input value changes if the input is focused,\n    // and there are items in the collection or allowEmptyCollection is true.\n    if (\n      isFocused &&\n      (filteredCollection.size > 0 || allowsEmptyCollection) &&\n      !triggerState.isOpen &&\n      inputValue !== lastValue &&\n      menuTrigger !== 'manual'\n    ) {\n      open(null, 'input');\n    }\n\n    // Close the menu if the collection is empty. Don't close menu if filtered collection size is 0\n    // but we are currently showing all items via button press\n    if (\n      !showAllItems &&\n      !allowsEmptyCollection &&\n      triggerState.isOpen &&\n      filteredCollection.size === 0\n    ) {\n      closeMenu();\n    }\n\n    // Close when an item is selected.\n    if (\n      selectedKey != null &&\n      selectedKey !== lastSelectedKey.current\n    ) {\n      closeMenu();\n    }\n\n    // Clear focused key when input value changes and display filtered collection again.\n    if (inputValue !== lastValue) {\n      selectionManager.setFocusedKey(null);\n      setShowAllItems(false);\n\n      // Set selectedKey to null when the user clears the input.\n      // If controlled, this is the application developer's responsibility.\n      if (inputValue === '' && (props.inputValue === undefined || props.selectedKey === undefined)) {\n        setSelectedKey(null);\n      }\n    }\n\n    // If the selectedKey changed, update the input value.\n    // Do nothing if both inputValue and selectedKey are controlled.\n    // In this case, it's the user's responsibility to update inputValue in onSelectionChange.\n    if (\n      selectedKey !== lastSelectedKey.current &&\n      (props.inputValue === undefined || props.selectedKey === undefined)\n    ) {\n      resetInputValue();\n    } else if (lastValue !== inputValue) {\n      setLastValue(inputValue);\n    }\n\n    // Update the inputValue if the selected item's text changes from its last tracked value.\n    // This is to handle cases where a selectedKey is specified but the items aren't available (async loading) or the selected item's text value updates.\n    // Only reset if the user isn't currently within the field so we don't erroneously modify user input.\n    // If inputValue is controlled, it is the user's responsibility to update the inputValue when items change.\n    let selectedItemText = selectedKey != null ? collection.getItem(selectedKey)?.textValue ?? '' : '';\n    if (!isFocused && selectedKey != null && props.inputValue === undefined && selectedKey === lastSelectedKey.current) {\n      if (lastSelectedKeyText.current !== selectedItemText) {\n        setLastValue(selectedItemText);\n        setInputValue(selectedItemText);\n      }\n    }\n\n    lastSelectedKey.current = selectedKey;\n    lastSelectedKeyText.current = selectedItemText;\n  });\n\n  let validation = useFormValidationState({\n    ...props,\n    value: useMemo(() => ({inputValue, selectedKey}), [inputValue, selectedKey])\n  });\n\n  // Revert input value and close menu\n  let revert = () => {\n    if (allowsCustomValue && selectedKey == null) {\n      commitCustomValue();\n    } else {\n      commitSelection();\n    }\n  };\n\n  let commitCustomValue = () => {\n    lastSelectedKey.current = null;\n    setSelectedKey(null);\n    closeMenu();\n  };\n\n  let commitSelection = () => {\n    // If multiple things are controlled, call onSelectionChange\n    if (props.selectedKey !== undefined && props.inputValue !== undefined) {\n      props.onSelectionChange?.(selectedKey);\n\n      // Stop menu from reopening from useEffect\n      let itemText = selectedKey != null ? collection.getItem(selectedKey)?.textValue ?? '' : '';\n      setLastValue(itemText);\n      closeMenu();\n    } else {\n      // If only a single aspect of combobox is controlled, reset input value and close menu for the user\n      resetInputValue();\n      closeMenu();\n    }\n  };\n\n  const commitValue = () => {\n    if (allowsCustomValue) {\n      const itemText = selectedKey != null ? collection.getItem(selectedKey)?.textValue ?? '' : '';\n      (inputValue === itemText) ? commitSelection() : commitCustomValue();\n    } else {\n      // Reset inputValue and close menu\n      commitSelection();\n    }\n  };\n\n  let commit = () => {\n    if (triggerState.isOpen && selectionManager.focusedKey != null) {\n      // Reset inputValue and close menu here if the selected key is already the focused key. Otherwise\n      // fire onSelectionChange to allow the application to control the closing.\n      if (selectedKey === selectionManager.focusedKey) {\n        commitSelection();\n      } else {\n        setSelectedKey(selectionManager.focusedKey);\n      }\n    } else {\n      commitValue();\n    }\n  };\n\n  let valueOnFocus = useRef(inputValue);\n  let setFocused = (isFocused: boolean) => {\n    if (isFocused) {\n      valueOnFocus.current = inputValue;\n      if (menuTrigger === 'focus' && !props.isReadOnly) {\n        open(null, 'focus');\n      }\n    } else {\n      if (shouldCloseOnBlur) {\n        commitValue();\n      }\n\n      if (inputValue !== valueOnFocus.current) {\n        validation.commitValidation();\n      }\n    }\n\n    setFocusedState(isFocused);\n  };\n\n  let displayedCollection = useMemo(() => {\n    if (triggerState.isOpen) {\n      if (showAllItems) {\n        return originalCollection;\n      } else {\n        return filteredCollection;\n      }\n    } else {\n      return lastCollection;\n    }\n  }, [triggerState.isOpen, originalCollection, filteredCollection, showAllItems, lastCollection]);\n\n  let defaultSelectedKey = props.defaultSelectedKey ?? initialSelectedKey;\n\n  return {\n    ...validation,\n    ...triggerState,\n    focusStrategy,\n    toggle,\n    open,\n    close: commitValue,\n    selectionManager,\n    selectedKey,\n    defaultSelectedKey,\n    setSelectedKey,\n    disabledKeys,\n    isFocused,\n    setFocused,\n    selectedItem,\n    collection: displayedCollection,\n    inputValue,\n    defaultInputValue: getDefaultInputValue(props.defaultInputValue, defaultSelectedKey, collection) ?? initialValue,\n    setInputValue,\n    commit,\n    revert\n  };\n}\n\nfunction filterCollection<T extends object>(collection: Collection<Node<T>>, inputValue: string, filter: FilterFn): Collection<Node<T>> {\n  return new ListCollection(filterNodes(collection, collection, inputValue, filter));\n}\n\nfunction filterNodes<T>(collection: Collection<Node<T>>, nodes: Iterable<Node<T>>, inputValue: string, filter: FilterFn): Iterable<Node<T>> {\n  let filteredNode: Node<T>[] = [];\n  for (let node of nodes) {\n    if (node.type === 'section' && node.hasChildNodes) {\n      let filtered = filterNodes(collection, getChildNodes(node, collection), inputValue, filter);\n      if ([...filtered].some(node => node.type === 'item')) {\n        filteredNode.push({...node, childNodes: filtered});\n      }\n    } else if (node.type === 'item' && filter(node.textValue, inputValue)) {\n      filteredNode.push({...node});\n    } else if (node.type !== 'item') {\n      filteredNode.push({...node});\n    }\n  }\n  return filteredNode;\n}\n\n\nfunction getDefaultInputValue(defaultInputValue: string | null | undefined, selectedKey: Key | null, collection: Collection<Node<unknown>>) {\n  if (defaultInputValue == null) {\n    if (selectedKey != null) {\n      return collection.getItem(selectedKey)?.textValue ?? '';\n    }\n  }\n\n  return defaultInputValue;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}