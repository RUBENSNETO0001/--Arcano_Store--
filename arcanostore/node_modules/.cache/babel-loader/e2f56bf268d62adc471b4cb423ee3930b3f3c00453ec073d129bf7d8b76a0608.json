{"ast":null,"code":"const PHP_SERVER_BASE = 'http://localhost';\nconst PHP_API_URL_REGISTRO = '/--Arcano_Store--/arcanostore/backend_php/login_registro/registro.php';\nconst PHP_API_URL_LOGIN = '/--Arcano_Store--/arcanostore/backend_php/login_registro/login.php';\nexport const registrarUsuario = async userData => {\n  try {\n    const response = await fetch(`${PHP_SERVER_BASE}${PHP_API_URL_REGISTRO}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      let errorMessage = `Erro HTTP: ${response.status}`;\n      try {\n        const errorData = JSON.parse(errorText);\n        errorMessage = errorData.mensagem || errorMessage;\n      } catch (e) {}\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    return {\n      sucesso: false,\n      mensagem: error.message || \"Erro de conexão com o servidor de registro.\"\n    };\n  }\n};\nexport const fazerLogin = async loginData => {\n  try {\n    const response = await fetch(`${PHP_SERVER_BASE}${PHP_API_URL_LOGIN}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(loginData)\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      let errorMessage = `Erro HTTP: ${response.status}`;\n      try {\n        const errorData = JSON.parse(errorText);\n        errorMessage = errorData.mensagem || errorMessage;\n      } catch (e) {}\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Erro na comunicação com o Backend de Login:\", error);\n    return {\n      sucesso: false,\n      mensagem: error.message || \"Erro de conexão com o servidor de login.\"\n    };\n  }\n};","map":{"version":3,"names":["PHP_SERVER_BASE","PHP_API_URL_REGISTRO","PHP_API_URL_LOGIN","registrarUsuario","userData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","errorMessage","status","errorData","parse","mensagem","e","Error","json","error","sucesso","message","fazerLogin","loginData","console"],"sources":["/opt/lampp/htdocs/--Arcano_Store--/arcanostore/src/services/apiService.js"],"sourcesContent":["const PHP_SERVER_BASE = 'http://localhost';\nconst PHP_API_URL_REGISTRO = '/--Arcano_Store--/arcanostore/backend_php/login_registro/registro.php';\nconst PHP_API_URL_LOGIN = '/--Arcano_Store--/arcanostore/backend_php/login_registro/login.php';\n\nexport const registrarUsuario = async (userData) => {\n    try {\n        const response = await fetch(`${PHP_SERVER_BASE}${PHP_API_URL_REGISTRO}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userData),\n        });\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            let errorMessage = `Erro HTTP: ${response.status}`;\n            try {\n                const errorData = JSON.parse(errorText);\n                errorMessage = errorData.mensagem || errorMessage;\n            } catch (e) {\n            }\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n\n    } catch (error) {\n        return { sucesso: false, mensagem: error.message || \"Erro de conexão com o servidor de registro.\" };\n    }\n};\n\nexport const fazerLogin = async (loginData) => {\n    try {\n        const response = await fetch(`${PHP_SERVER_BASE}${PHP_API_URL_LOGIN}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(loginData),\n        });\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            let errorMessage = `Erro HTTP: ${response.status}`;\n            try {\n                const errorData = JSON.parse(errorText);\n                errorMessage = errorData.mensagem || errorMessage;\n            } catch (e) {\n            }\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n\n    } catch (error) {\n        console.error(\"Erro na comunicação com o Backend de Login:\", error);\n        return { sucesso: false, mensagem: error.message || \"Erro de conexão com o servidor de login.\" };\n    }\n}"],"mappings":"AAAA,MAAMA,eAAe,GAAG,kBAAkB;AAC1C,MAAMC,oBAAoB,GAAG,uEAAuE;AACpG,MAAMC,iBAAiB,GAAG,oEAAoE;AAE9F,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAChD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,eAAe,GAAGC,oBAAoB,EAAE,EAAE;MACtEM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;IACjC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,IAAIC,YAAY,GAAG,cAAcV,QAAQ,CAACW,MAAM,EAAE;MAClD,IAAI;QACA,MAAMC,SAAS,GAAGP,IAAI,CAACQ,KAAK,CAACL,SAAS,CAAC;QACvCE,YAAY,GAAGE,SAAS,CAACE,QAAQ,IAAIJ,YAAY;MACrD,CAAC,CAAC,OAAOK,CAAC,EAAE,CACZ;MACA,MAAM,IAAIC,KAAK,CAACN,YAAY,CAAC;IACjC;IACA,OAAO,MAAMV,QAAQ,CAACiB,IAAI,CAAC,CAAC;EAEhC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEL,QAAQ,EAAEI,KAAK,CAACE,OAAO,IAAI;IAA8C,CAAC;EACvG;AACJ,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAOC,SAAS,IAAK;EAC3C,IAAI;IACA,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,eAAe,GAAGE,iBAAiB,EAAE,EAAE;MACnEK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACgB,SAAS;IAClC,CAAC,CAAC;IAEF,IAAI,CAACtB,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,IAAIC,YAAY,GAAG,cAAcV,QAAQ,CAACW,MAAM,EAAE;MAClD,IAAI;QACA,MAAMC,SAAS,GAAGP,IAAI,CAACQ,KAAK,CAACL,SAAS,CAAC;QACvCE,YAAY,GAAGE,SAAS,CAACE,QAAQ,IAAIJ,YAAY;MACrD,CAAC,CAAC,OAAOK,CAAC,EAAE,CACZ;MACA,MAAM,IAAIC,KAAK,CAACN,YAAY,CAAC;IACjC;IACA,OAAO,MAAMV,QAAQ,CAACiB,IAAI,CAAC,CAAC;EAEhC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZK,OAAO,CAACL,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACnE,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEL,QAAQ,EAAEI,KAAK,CAACE,OAAO,IAAI;IAA2C,CAAC;EACpG;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}