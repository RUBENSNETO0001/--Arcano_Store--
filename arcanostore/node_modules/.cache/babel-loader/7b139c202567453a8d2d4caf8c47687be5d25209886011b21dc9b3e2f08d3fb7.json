{"ast":null,"code":"// **ATENÇÃO:** A URL deve ser absoluta a partir do seu servidor web (Apache/XAMPP)\n// **ASSUMA** que seu servidor web está servindo a pasta 'backend_php' na raiz.\n// --- MUDANÇA RECOMENDADA PARA REGISTRO ---\nconst API_BASE_URL = 'http://localhost'; // ou 'http://localhost:8080' se for o caso\n// O PHP_API_URL_REGISTRO permanece o mesmo se a pasta 'backend_php' estiver na raiz do servidor web\nconst PHP_API_URL_REGISTRO = '/backend_php/login_registro/registro.php';\n// --- FUNÇÃO DE REGISTRO ---\nexport const registrarUsuario = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${PHP_API_URL_REGISTRO}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n\n    // response.ok só será true para status 200-299. O 201 (Created) do PHP é pego aqui.\n    if (!response.ok) {\n      // Se o PHP retornou um erro (400, 500, etc.), tentamos ler o JSON de erro\n      const errorText = await response.text(); // Tentamos ler como texto primeiro\n      let errorMessage = `Erro HTTP: ${response.status}`;\n      try {\n        const errorData = JSON.parse(errorText); // Tenta parsear como JSON\n        errorMessage = errorData.mensagem || errorMessage;\n      } catch (e) {\n        // Se não for JSON, mantemos a mensagem de status.\n      }\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    // Aqui pega erros de rede (Failed to fetch) ou erros que lançamos (HTTP status não OK)\n    return {\n      sucesso: false,\n      mensagem: error.message || \"Erro de conexão com o servidor de registro.\"\n    };\n  }\n};","map":{"version":3,"names":["API_BASE_URL","PHP_API_URL_REGISTRO","registrarUsuario","userData","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","errorMessage","status","errorData","parse","mensagem","e","Error","json","error","sucesso","message"],"sources":["/opt/lampp/htdocs/--Arcano_Store--/arcanostore/src/componetes_secundarios/services/apiService.js"],"sourcesContent":["// **ATENÇÃO:** A URL deve ser absoluta a partir do seu servidor web (Apache/XAMPP)\n// **ASSUMA** que seu servidor web está servindo a pasta 'backend_php' na raiz.\n// --- MUDANÇA RECOMENDADA PARA REGISTRO ---\nconst API_BASE_URL = 'http://localhost'; // ou 'http://localhost:8080' se for o caso\n// O PHP_API_URL_REGISTRO permanece o mesmo se a pasta 'backend_php' estiver na raiz do servidor web\nconst PHP_API_URL_REGISTRO = '/backend_php/login_registro/registro.php';\n// --- FUNÇÃO DE REGISTRO ---\nexport const registrarUsuario = async (userData) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}${PHP_API_URL_REGISTRO}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userData), \n        });\n\n        // response.ok só será true para status 200-299. O 201 (Created) do PHP é pego aqui.\n        if (!response.ok) {\n            // Se o PHP retornou um erro (400, 500, etc.), tentamos ler o JSON de erro\n            const errorText = await response.text(); // Tentamos ler como texto primeiro\n            let errorMessage = `Erro HTTP: ${response.status}`;\n            try {\n                 const errorData = JSON.parse(errorText); // Tenta parsear como JSON\n                 errorMessage = errorData.mensagem || errorMessage;\n            } catch (e) {\n                // Se não for JSON, mantemos a mensagem de status.\n            }\n            throw new Error(errorMessage);\n        }\n        return await response.json(); \n\n    } catch (error) {\n        // Aqui pega erros de rede (Failed to fetch) ou erros que lançamos (HTTP status não OK)\n        return { sucesso: false, mensagem: error.message || \"Erro de conexão com o servidor de registro.\" };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,YAAY,GAAG,kBAAkB,CAAC,CAAC;AACzC;AACA,MAAMC,oBAAoB,GAAG,0CAA0C;AACvE;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAChD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,GAAGC,oBAAoB,EAAE,EAAE;MACnEK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;IACjC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd;MACA,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;MACzC,IAAIC,YAAY,GAAG,cAAcV,QAAQ,CAACW,MAAM,EAAE;MAClD,IAAI;QACC,MAAMC,SAAS,GAAGP,IAAI,CAACQ,KAAK,CAACL,SAAS,CAAC,CAAC,CAAC;QACzCE,YAAY,GAAGE,SAAS,CAACE,QAAQ,IAAIJ,YAAY;MACtD,CAAC,CAAC,OAAOK,CAAC,EAAE;QACR;MAAA;MAEJ,MAAM,IAAIC,KAAK,CAACN,YAAY,CAAC;IACjC;IACA,OAAO,MAAMV,QAAQ,CAACiB,IAAI,CAAC,CAAC;EAEhC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ;IACA,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEL,QAAQ,EAAEI,KAAK,CAACE,OAAO,IAAI;IAA8C,CAAC;EACvG;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}