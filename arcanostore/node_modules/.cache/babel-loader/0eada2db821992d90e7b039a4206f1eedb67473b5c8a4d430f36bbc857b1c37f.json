{"ast":null,"code":"import { mergeProps as $bvdLj$mergeProps, filterDOMProps as $bvdLj$filterDOMProps, useFormReset as $bvdLj$useFormReset } from \"@react-aria/utils\";\nimport { usePress as $bvdLj$usePress, useFocusable as $bvdLj$useFocusable } from \"@react-aria/interactions\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n  let {\n    isDisabled = false,\n    isReadOnly = false,\n    value: value,\n    name: name,\n    form: form,\n    children: children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid',\n    isInvalid: isInvalid,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPress: onPress,\n    onPressUp: onPressUp,\n    onClick: onClick\n  } = props;\n  let onChange = e => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel && process.env.NODE_ENV !== 'production') console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  // Handle press state for keyboard interactions and cases where labelProps is not used.\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $bvdLj$usePress)({\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPress: onPress,\n    onPressUp: onPressUp,\n    onClick: onClick,\n    isDisabled: isDisabled\n  });\n  // Handle press state on the label.\n  let {\n    pressProps: labelProps,\n    isPressed: isLabelPressed\n  } = (0, $bvdLj$usePress)({\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPressUp: onPressUp,\n    onClick: onClick,\n    onPress(e) {\n      var _ref_current;\n      onPress === null || onPress === void 0 ? void 0 : onPress(e);\n      state.toggle();\n      (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.focus();\n    },\n    isDisabled: isDisabled || isReadOnly\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $bvdLj$useFocusable)(props, ref);\n  let interactions = (0, $bvdLj$mergeProps)(pressProps, focusableProps);\n  let domProps = (0, $bvdLj$filterDOMProps)(props, {\n    labelable: true\n  });\n  (0, $bvdLj$useFormReset)(ref, state.defaultSelected, state.setSelected);\n  return {\n    labelProps: (0, $bvdLj$mergeProps)(labelProps, {\n      onClick: e => e.preventDefault()\n    }),\n    inputProps: (0, $bvdLj$mergeProps)(domProps, {\n      'aria-invalid': isInvalid || validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      onChange: onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {\n        value: value\n      }),\n      name: name,\n      form: form,\n      type: 'checkbox',\n      ...interactions\n    }),\n    isSelected: state.isSelected,\n    isPressed: isPressed || isLabelPressed,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isInvalid: isInvalid || validationState === 'invalid'\n  };\n}\nexport { $d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle };","map":{"version":3,"names":["$d2c8e2b0480f3f34$export$cbe85ee05b554577","props","state","ref","isDisabled","isReadOnly","value","name","form","children","ariaLabel","ariaLabelledby","validationState","isInvalid","onPressStart","onPressEnd","onPressChange","onPress","onPressUp","onClick","onChange","e","stopPropagation","setSelected","target","checked","hasChildren","hasAriaLabel","process","env","NODE_ENV","console","warn","pressProps","isPressed","$bvdLj$usePress","labelProps","isLabelPressed","_ref_current","toggle","current","focus","focusableProps","$bvdLj$useFocusable","interactions","$bvdLj$mergeProps","domProps","$bvdLj$filterDOMProps","labelable","$bvdLj$useFormReset","defaultSelected","preventDefault","inputProps","undefined","disabled","type","isSelected"],"sources":["C:\\Users\\Aluno\\Documents\\GitHub\\--Arcano_Store--\\arcanostore\\node_modules\\@react-aria\\toggle\\dist\\packages\\@react-aria\\toggle\\src\\useToggle.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps, useFormReset} from '@react-aria/utils';\nimport {InputHTMLAttributes, LabelHTMLAttributes} from 'react';\nimport {RefObject} from '@react-types/shared';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable, usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /** Props to be spread on the label element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to be spread on the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the toggle is selected. */\n  isSelected: boolean,\n  /** Whether the toggle is in a pressed state. */\n  isPressed: boolean,\n  /** Whether the toggle is disabled. */\n  isDisabled: boolean,\n  /** Whether the toggle is read only. */\n  isReadOnly: boolean,\n  /** Whether the toggle is invalid. */\n  isInvalid: boolean\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLInputElement | null>): ToggleAria {\n  let {\n    isDisabled = false,\n    isReadOnly = false,\n    value,\n    name,\n    form,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid',\n    isInvalid,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    onPressUp,\n    onClick\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel && process.env.NODE_ENV !== 'production') {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // Handle press state for keyboard interactions and cases where labelProps is not used.\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    onPressUp,\n    onClick,\n    isDisabled\n  });\n\n  // Handle press state on the label.\n  let {pressProps: labelProps, isPressed: isLabelPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPressUp,\n    onClick,\n    onPress(e) {\n      onPress?.(e);\n      state.toggle();\n      ref.current?.focus();\n    },\n    isDisabled: isDisabled || isReadOnly\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  useFormReset(ref, state.defaultSelected, state.setSelected);\n\n  return {\n    labelProps: mergeProps(labelProps, {onClick: e => e.preventDefault()}),\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': isInvalid || validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {value}),\n      name,\n      form,\n      type: 'checkbox',\n      ...interactions\n    }),\n    isSelected: state.isSelected,\n    isPressed: isPressed || isLabelPressed,\n    isDisabled,\n    isReadOnly,\n    isInvalid: isInvalid || validationState === 'invalid'\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}