{"ast":null,"code":"// src/index.ts\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { usePress } from \"@react-aria/interactions\";\nfunction useAriaButton(props, ref) {\n  let {\n    elementType = \"button\",\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    onClick,\n    href,\n    target,\n    rel,\n    type = \"button\",\n    allowTextSelectionOnPress\n  } = props;\n  let additionalProps;\n  if (elementType === \"button\") {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: \"button\",\n      href: elementType === \"a\" && !isDisabled ? href : void 0,\n      target: elementType === \"a\" ? target : void 0,\n      type: elementType === \"input\" ? type : void 0,\n      disabled: elementType === \"input\" ? isDisabled : void 0,\n      \"aria-disabled\": !isDisabled || elementType === \"input\" ? void 0 : isDisabled,\n      rel: elementType === \"a\" ? rel : void 0\n    };\n  }\n  let {\n    pressProps,\n    isPressed\n  } = usePress({\n    onClick,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    onPressChange,\n    onPress,\n    isDisabled,\n    preventFocusOnPress,\n    allowTextSelectionOnPress,\n    ref\n  });\n  let {\n    focusableProps\n  } = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {\n    labelable: true\n  }));\n  return {\n    isPressed,\n    // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      \"aria-haspopup\": props[\"aria-haspopup\"],\n      \"aria-expanded\": props[\"aria-expanded\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-pressed\": props[\"aria-pressed\"],\n      \"aria-current\": props[\"aria-current\"]\n    })\n  };\n}\nexport { useAriaButton };","map":{"version":3,"names":["filterDOMProps","mergeProps","useFocusable","usePress","useAriaButton","props","ref","elementType","isDisabled","onPress","onPressStart","onPressEnd","onPressUp","onPressChange","preventFocusOnPress","allowFocusWhenDisabled","onClick","href","target","rel","type","allowTextSelectionOnPress","additionalProps","disabled","role","pressProps","isPressed","focusableProps","tabIndex","buttonProps","labelable"],"sources":["C:/Users/Aluno/Documents/GitHub/--Arcano_Store--/arcanostore/node_modules/@heroui/use-aria-button/dist/index.mjs"],"sourcesContent":["// src/index.ts\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { usePress } from \"@react-aria/interactions\";\nfunction useAriaButton(props, ref) {\n  let {\n    elementType = \"button\",\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    onClick,\n    href,\n    target,\n    rel,\n    type = \"button\",\n    allowTextSelectionOnPress\n  } = props;\n  let additionalProps;\n  if (elementType === \"button\") {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: \"button\",\n      href: elementType === \"a\" && !isDisabled ? href : void 0,\n      target: elementType === \"a\" ? target : void 0,\n      type: elementType === \"input\" ? type : void 0,\n      disabled: elementType === \"input\" ? isDisabled : void 0,\n      \"aria-disabled\": !isDisabled || elementType === \"input\" ? void 0 : isDisabled,\n      rel: elementType === \"a\" ? rel : void 0\n    };\n  }\n  let { pressProps, isPressed } = usePress({\n    onClick,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    onPressChange,\n    onPress,\n    isDisabled,\n    preventFocusOnPress,\n    allowTextSelectionOnPress,\n    ref\n  });\n  let { focusableProps } = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(\n    focusableProps,\n    pressProps,\n    filterDOMProps(props, { labelable: true })\n  );\n  return {\n    isPressed,\n    // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      \"aria-haspopup\": props[\"aria-haspopup\"],\n      \"aria-expanded\": props[\"aria-expanded\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-pressed\": props[\"aria-pressed\"],\n      \"aria-current\": props[\"aria-current\"]\n    })\n  };\n}\nexport {\n  useAriaButton\n};\n"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,UAAU,QAAQ,mBAAmB;AAC9D,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,aAAaA,CAACC,KAAK,EAAEC,GAAG,EAAE;EACjC,IAAI;IACFC,WAAW,GAAG,QAAQ;IACtBC,UAAU;IACVC,OAAO;IACPC,YAAY;IACZC,UAAU;IACVC,SAAS;IACTC,aAAa;IACb;IACAC,mBAAmB;IACnB;IACAC,sBAAsB;IACtBC,OAAO;IACPC,IAAI;IACJC,MAAM;IACNC,GAAG;IACHC,IAAI,GAAG,QAAQ;IACfC;EACF,CAAC,GAAGhB,KAAK;EACT,IAAIiB,eAAe;EACnB,IAAIf,WAAW,KAAK,QAAQ,EAAE;IAC5Be,eAAe,GAAG;MAChBF,IAAI;MACJG,QAAQ,EAAEf;IACZ,CAAC;EACH,CAAC,MAAM;IACLc,eAAe,GAAG;MAChBE,IAAI,EAAE,QAAQ;MACdP,IAAI,EAAEV,WAAW,KAAK,GAAG,IAAI,CAACC,UAAU,GAAGS,IAAI,GAAG,KAAK,CAAC;MACxDC,MAAM,EAAEX,WAAW,KAAK,GAAG,GAAGW,MAAM,GAAG,KAAK,CAAC;MAC7CE,IAAI,EAAEb,WAAW,KAAK,OAAO,GAAGa,IAAI,GAAG,KAAK,CAAC;MAC7CG,QAAQ,EAAEhB,WAAW,KAAK,OAAO,GAAGC,UAAU,GAAG,KAAK,CAAC;MACvD,eAAe,EAAE,CAACA,UAAU,IAAID,WAAW,KAAK,OAAO,GAAG,KAAK,CAAC,GAAGC,UAAU;MAC7EW,GAAG,EAAEZ,WAAW,KAAK,GAAG,GAAGY,GAAG,GAAG,KAAK;IACxC,CAAC;EACH;EACA,IAAI;IAAEM,UAAU;IAAEC;EAAU,CAAC,GAAGvB,QAAQ,CAAC;IACvCa,OAAO;IACPN,YAAY;IACZC,UAAU;IACVC,SAAS;IACTC,aAAa;IACbJ,OAAO;IACPD,UAAU;IACVM,mBAAmB;IACnBO,yBAAyB;IACzBf;EACF,CAAC,CAAC;EACF,IAAI;IAAEqB;EAAe,CAAC,GAAGzB,YAAY,CAACG,KAAK,EAAEC,GAAG,CAAC;EACjD,IAAIS,sBAAsB,EAAE;IAC1BY,cAAc,CAACC,QAAQ,GAAGpB,UAAU,GAAG,CAAC,CAAC,GAAGmB,cAAc,CAACC,QAAQ;EACrE;EACA,IAAIC,WAAW,GAAG5B,UAAU,CAC1B0B,cAAc,EACdF,UAAU,EACVzB,cAAc,CAACK,KAAK,EAAE;IAAEyB,SAAS,EAAE;EAAK,CAAC,CAC3C,CAAC;EACD,OAAO;IACLJ,SAAS;IACT;IACAG,WAAW,EAAE5B,UAAU,CAACqB,eAAe,EAAEO,WAAW,EAAE;MACpD,eAAe,EAAExB,KAAK,CAAC,eAAe,CAAC;MACvC,eAAe,EAAEA,KAAK,CAAC,eAAe,CAAC;MACvC,eAAe,EAAEA,KAAK,CAAC,eAAe,CAAC;MACvC,cAAc,EAAEA,KAAK,CAAC,cAAc,CAAC;MACrC,cAAc,EAAEA,KAAK,CAAC,cAAc;IACtC,CAAC;EACH,CAAC;AACH;AACA,SACED,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}