{"ast":null,"code":"import { calculatePosition as $edcf132a9284368a$export$b3ceb0cbf1056d98, getRect as $edcf132a9284368a$export$4b834cebd9e5cebe } from \"./calculatePosition.mjs\";\nimport { useCloseOnScroll as $dd149f63282afbbf$export$18fc8428861184da } from \"./useCloseOnScroll.mjs\";\nimport { useState as $39EOa$useState, useRef as $39EOa$useRef, useEffect as $39EOa$useEffect, useCallback as $39EOa$useCallback } from \"react\";\nimport { useLayoutEffect as $39EOa$useLayoutEffect, useResizeObserver as $39EOa$useResizeObserver } from \"@react-aria/utils\";\nimport { useLocale as $39EOa$useLocale } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet $2a41e45df1593e64$var$visualViewport = typeof document !== 'undefined' ? window.visualViewport : null;\nfunction $2a41e45df1593e64$export$d39e1813b3bdd0e1(props) {\n  let {\n    direction: direction\n  } = (0, $39EOa$useLocale)();\n  let {\n    arrowSize: arrowSize,\n    targetRef: targetRef,\n    overlayRef: overlayRef,\n    arrowRef: arrowRef,\n    scrollRef = overlayRef,\n    placement = 'bottom',\n    containerPadding = 12,\n    shouldFlip = true,\n    boundaryElement = typeof document !== 'undefined' ? document.body : null,\n    offset = 0,\n    crossOffset = 0,\n    shouldUpdatePosition = true,\n    isOpen = true,\n    onClose: onClose,\n    maxHeight: maxHeight,\n    arrowBoundaryOffset = 0\n  } = props;\n  let [position, setPosition] = (0, $39EOa$useState)(null);\n  let deps = [shouldUpdatePosition, placement, overlayRef.current, targetRef.current, arrowRef === null || arrowRef === void 0 ? void 0 : arrowRef.current, scrollRef.current, containerPadding, shouldFlip, boundaryElement, offset, crossOffset, isOpen, direction, maxHeight, arrowBoundaryOffset, arrowSize];\n  // Note, the position freezing breaks if body sizes itself dynamicly with the visual viewport but that might\n  // just be a non-realistic use case\n  // Upon opening a overlay, record the current visual viewport scale so we can freeze the overlay styles\n  let lastScale = (0, $39EOa$useRef)($2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale);\n  (0, $39EOa$useEffect)(() => {\n    if (isOpen) lastScale.current = $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale;\n  }, [isOpen]);\n  let updatePosition = (0, $39EOa$useCallback)(() => {\n    if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !boundaryElement) return;\n    if (($2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale) !== lastScale.current) return;\n    // Determine a scroll anchor based on the focused element.\n    // This stores the offset of the anchor element from the scroll container\n    // so it can be restored after repositioning. This way if the overlay height\n    // changes, the focused element appears to stay in the same position.\n    let anchor = null;\n    if (scrollRef.current && scrollRef.current.contains(document.activeElement)) {\n      var _document_activeElement;\n      let anchorRect = (_document_activeElement = document.activeElement) === null || _document_activeElement === void 0 ? void 0 : _document_activeElement.getBoundingClientRect();\n      let scrollRect = scrollRef.current.getBoundingClientRect();\n      var _anchorRect_top;\n      // Anchor from the top if the offset is in the top half of the scrollable element,\n      // otherwise anchor from the bottom.\n      anchor = {\n        type: 'top',\n        offset: ((_anchorRect_top = anchorRect === null || anchorRect === void 0 ? void 0 : anchorRect.top) !== null && _anchorRect_top !== void 0 ? _anchorRect_top : 0) - scrollRect.top\n      };\n      if (anchor.offset > scrollRect.height / 2) {\n        anchor.type = 'bottom';\n        var _anchorRect_bottom;\n        anchor.offset = ((_anchorRect_bottom = anchorRect === null || anchorRect === void 0 ? void 0 : anchorRect.bottom) !== null && _anchorRect_bottom !== void 0 ? _anchorRect_bottom : 0) - scrollRect.bottom;\n      }\n    }\n    // Always reset the overlay's previous max height if not defined by the user so that we can compensate for\n    // RAC collections populating after a second render and properly set a correct max height + positioning when it populates.\n    let overlay = overlayRef.current;\n    if (!maxHeight && overlayRef.current) {\n      var _window_visualViewport;\n      overlay.style.top = '0px';\n      overlay.style.bottom = '';\n      var _window_visualViewport_height;\n      overlay.style.maxHeight = ((_window_visualViewport_height = (_window_visualViewport = window.visualViewport) === null || _window_visualViewport === void 0 ? void 0 : _window_visualViewport.height) !== null && _window_visualViewport_height !== void 0 ? _window_visualViewport_height : window.innerHeight) + 'px';\n    }\n    let position = (0, $edcf132a9284368a$export$b3ceb0cbf1056d98)({\n      placement: $2a41e45df1593e64$var$translateRTL(placement, direction),\n      overlayNode: overlayRef.current,\n      targetNode: targetRef.current,\n      scrollNode: scrollRef.current || overlayRef.current,\n      padding: containerPadding,\n      shouldFlip: shouldFlip,\n      boundaryElement: boundaryElement,\n      offset: offset,\n      crossOffset: crossOffset,\n      maxHeight: maxHeight,\n      arrowSize: arrowSize !== null && arrowSize !== void 0 ? arrowSize : (arrowRef === null || arrowRef === void 0 ? void 0 : arrowRef.current) ? (0, $edcf132a9284368a$export$4b834cebd9e5cebe)(arrowRef.current, true).width : 0,\n      arrowBoundaryOffset: arrowBoundaryOffset\n    });\n    if (!position.position) return;\n    // Modify overlay styles directly so positioning happens immediately without the need of a second render\n    // This is so we don't have to delay autoFocus scrolling or delay applying preventScroll for popovers\n    overlay.style.top = '';\n    overlay.style.bottom = '';\n    overlay.style.left = '';\n    overlay.style.right = '';\n    Object.keys(position.position).forEach(key => overlay.style[key] = position.position[key] + 'px');\n    overlay.style.maxHeight = position.maxHeight != null ? position.maxHeight + 'px' : '';\n    // Restore scroll position relative to anchor element.\n    if (anchor && document.activeElement && scrollRef.current) {\n      let anchorRect = document.activeElement.getBoundingClientRect();\n      let scrollRect = scrollRef.current.getBoundingClientRect();\n      let newOffset = anchorRect[anchor.type] - scrollRect[anchor.type];\n      scrollRef.current.scrollTop += newOffset - anchor.offset;\n    }\n    // Trigger a set state for a second render anyway for arrow positioning\n    setPosition(position);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  // Update position when anything changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  (0, $39EOa$useLayoutEffect)(updatePosition, deps);\n  // Update position on window resize\n  $2a41e45df1593e64$var$useResize(updatePosition);\n  // Update position when the overlay changes size (might need to flip).\n  (0, $39EOa$useResizeObserver)({\n    ref: overlayRef,\n    onResize: updatePosition\n  });\n  // Update position when the target changes size (might need to flip).\n  (0, $39EOa$useResizeObserver)({\n    ref: targetRef,\n    onResize: updatePosition\n  });\n  // Reposition the overlay and do not close on scroll while the visual viewport is resizing.\n  // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.\n  let isResizing = (0, $39EOa$useRef)(false);\n  (0, $39EOa$useLayoutEffect)(() => {\n    let timeout;\n    let onResize = () => {\n      isResizing.current = true;\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        isResizing.current = false;\n      }, 500);\n      updatePosition();\n    };\n    // Only reposition the overlay if a scroll event happens immediately as a result of resize (aka the virtual keyboard has appears)\n    // We don't want to reposition the overlay if the user has pinch zoomed in and is scrolling the viewport around.\n    let onScroll = () => {\n      if (isResizing.current) onResize();\n    };\n    $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener('resize', onResize);\n    $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener('scroll', onScroll);\n    return () => {\n      $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener('resize', onResize);\n      $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener('scroll', onScroll);\n    };\n  }, [updatePosition]);\n  let close = (0, $39EOa$useCallback)(() => {\n    if (!isResizing.current) onClose === null || onClose === void 0 ? void 0 : onClose();\n  }, [onClose, isResizing]);\n  // When scrolling a parent scrollable region of the trigger (other than the body),\n  // we hide the popover. Otherwise, its position would be incorrect.\n  (0, $dd149f63282afbbf$export$18fc8428861184da)({\n    triggerRef: targetRef,\n    isOpen: isOpen,\n    onClose: onClose && close\n  });\n  var _position_maxHeight, _position_placement, _position_triggerAnchorPoint;\n  return {\n    overlayProps: {\n      style: {\n        position: position ? 'absolute' : 'fixed',\n        top: !position ? 0 : undefined,\n        left: !position ? 0 : undefined,\n        zIndex: 100000,\n        ...(position === null || position === void 0 ? void 0 : position.position),\n        maxHeight: (_position_maxHeight = position === null || position === void 0 ? void 0 : position.maxHeight) !== null && _position_maxHeight !== void 0 ? _position_maxHeight : '100vh'\n      }\n    },\n    placement: (_position_placement = position === null || position === void 0 ? void 0 : position.placement) !== null && _position_placement !== void 0 ? _position_placement : null,\n    triggerAnchorPoint: (_position_triggerAnchorPoint = position === null || position === void 0 ? void 0 : position.triggerAnchorPoint) !== null && _position_triggerAnchorPoint !== void 0 ? _position_triggerAnchorPoint : null,\n    arrowProps: {\n      'aria-hidden': 'true',\n      role: 'presentation',\n      style: {\n        left: position === null || position === void 0 ? void 0 : position.arrowOffsetLeft,\n        top: position === null || position === void 0 ? void 0 : position.arrowOffsetTop\n      }\n    },\n    updatePosition: updatePosition\n  };\n}\nfunction $2a41e45df1593e64$var$useResize(onResize) {\n  (0, $39EOa$useLayoutEffect)(() => {\n    window.addEventListener('resize', onResize, false);\n    return () => {\n      window.removeEventListener('resize', onResize, false);\n    };\n  }, [onResize]);\n}\nfunction $2a41e45df1593e64$var$translateRTL(position, direction) {\n  if (direction === 'rtl') return position.replace('start', 'right').replace('end', 'left');\n  return position.replace('start', 'left').replace('end', 'right');\n}\nexport { $2a41e45df1593e64$export$d39e1813b3bdd0e1 as useOverlayPosition };","map":{"version":3,"names":["$2a41e45df1593e64$var$visualViewport","document","window","visualViewport","$2a41e45df1593e64$export$d39e1813b3bdd0e1","props","direction","$39EOa$useLocale","arrowSize","targetRef","overlayRef","arrowRef","scrollRef","placement","containerPadding","shouldFlip","boundaryElement","body","offset","crossOffset","shouldUpdatePosition","isOpen","onClose","maxHeight","arrowBoundaryOffset","position","setPosition","$39EOa$useState","deps","current","lastScale","$39EOa$useRef","scale","$39EOa$useEffect","updatePosition","$39EOa$useCallback","anchor","contains","activeElement","_document_activeElement","anchorRect","getBoundingClientRect","scrollRect","_anchorRect_top","type","top","height","_anchorRect_bottom","bottom","overlay","_window_visualViewport","style","_window_visualViewport_height","innerHeight","$edcf132a9284368a$export$b3ceb0cbf1056d98","$2a41e45df1593e64$var$translateRTL","overlayNode","targetNode","scrollNode","padding","$edcf132a9284368a$export$4b834cebd9e5cebe","width","left","right","Object","keys","forEach","key","newOffset","scrollTop","$39EOa$useLayoutEffect","$2a41e45df1593e64$var$useResize","$39EOa$useResizeObserver","ref","onResize","isResizing","timeout","clearTimeout","setTimeout","onScroll","addEventListener","removeEventListener","close","$dd149f63282afbbf$export$18fc8428861184da","triggerRef","_position_maxHeight","_position_placement","_position_triggerAnchorPoint","overlayProps","undefined","zIndex","triggerAnchorPoint","arrowProps","role","arrowOffsetLeft","arrowOffsetTop","replace"],"sources":["C:\\Users\\Aluno\\Documents\\GitHub\\--Arcano_Store--\\arcanostore\\node_modules\\@react-aria\\menu\\node_modules\\@react-aria\\overlays\\dist\\packages\\@react-aria\\overlays\\src\\useOverlayPosition.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {calculatePosition, getRect, PositionResult} from './calculatePosition';\nimport {DOMAttributes, RefObject} from '@react-types/shared';\nimport {Placement, PlacementAxis, PositionProps} from '@react-types/overlays';\nimport {useCallback, useEffect, useRef, useState} from 'react';\nimport {useCloseOnScroll} from './useCloseOnScroll';\nimport {useLayoutEffect, useResizeObserver} from '@react-aria/utils';\nimport {useLocale} from '@react-aria/i18n';\n\nexport interface AriaPositionProps extends PositionProps {\n  /**\n   * Cross size of the overlay arrow in pixels.\n   * @default 0\n   */\n  arrowSize?: number,\n  /**\n   * Element that that serves as the positioning boundary.\n   * @default document.body\n   */\n  boundaryElement?: Element,\n  /**\n   * The ref for the element which the overlay positions itself with respect to.\n   */\n  targetRef: RefObject<Element | null>,\n  /**\n   * The ref for the overlay element.\n   */\n  overlayRef: RefObject<Element | null>,\n  /**\n   * The ref for the arrow element.\n   */\n  arrowRef?: RefObject<Element | null>,\n  /**\n   * A ref for the scrollable region within the overlay.\n   * @default overlayRef\n   */\n  scrollRef?: RefObject<Element | null>,\n  /**\n   * Whether the overlay should update its position automatically.\n   * @default true\n   */\n  shouldUpdatePosition?: boolean,\n  /** Handler that is called when the overlay should close. */\n  onClose?: (() => void) | null,\n  /**\n   * The maxHeight specified for the overlay element.\n   * By default, it will take all space up to the current viewport height.\n   */\n  maxHeight?: number,\n  /**\n   * The minimum distance the arrow's edge should be from the edge of the overlay element.\n   * @default 0\n   */\n  arrowBoundaryOffset?: number\n}\n\nexport interface PositionAria {\n  /** Props for the overlay container element. */\n  overlayProps: DOMAttributes,\n  /** Props for the overlay tip arrow if any. */\n  arrowProps: DOMAttributes,\n  /** Placement of the overlay with respect to the overlay trigger. */\n  placement: PlacementAxis | null,\n  /** The origin of the target in the overlay's coordinate system. Useful for animations. */\n  triggerAnchorPoint: {x: number, y: number} | null,\n  /** Updates the position of the overlay. */\n  updatePosition(): void\n}\n\ninterface ScrollAnchor {\n  type: 'top' | 'bottom',\n  offset: number\n}\n\nlet visualViewport = typeof document !== 'undefined' ? window.visualViewport : null;\n\n/**\n * Handles positioning overlays like popovers and menus relative to a trigger\n * element, and updating the position when the window resizes.\n */\nexport function useOverlayPosition(props: AriaPositionProps): PositionAria {\n  let {direction} = useLocale();\n  let {\n    arrowSize,\n    targetRef,\n    overlayRef,\n    arrowRef,\n    scrollRef = overlayRef,\n    placement = 'bottom' as Placement,\n    containerPadding = 12,\n    shouldFlip = true,\n    boundaryElement = typeof document !== 'undefined' ? document.body : null,\n    offset = 0,\n    crossOffset = 0,\n    shouldUpdatePosition = true,\n    isOpen = true,\n    onClose,\n    maxHeight,\n    arrowBoundaryOffset = 0\n  } = props;\n  let [position, setPosition] = useState<PositionResult | null>(null);\n\n  let deps = [\n    shouldUpdatePosition,\n    placement,\n    overlayRef.current,\n    targetRef.current,\n    arrowRef?.current,\n    scrollRef.current,\n    containerPadding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset,\n    isOpen,\n    direction,\n    maxHeight,\n    arrowBoundaryOffset,\n    arrowSize\n  ];\n\n  // Note, the position freezing breaks if body sizes itself dynamicly with the visual viewport but that might\n  // just be a non-realistic use case\n  // Upon opening a overlay, record the current visual viewport scale so we can freeze the overlay styles\n  let lastScale = useRef(visualViewport?.scale);\n  useEffect(() => {\n    if (isOpen) {\n      lastScale.current = visualViewport?.scale;\n    }\n  }, [isOpen]);\n\n  let updatePosition = useCallback(() => {\n    if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !boundaryElement) {\n      return;\n    }\n\n    if (visualViewport?.scale !== lastScale.current) {\n      return;\n    }\n\n    // Determine a scroll anchor based on the focused element.\n    // This stores the offset of the anchor element from the scroll container\n    // so it can be restored after repositioning. This way if the overlay height\n    // changes, the focused element appears to stay in the same position.\n    let anchor: ScrollAnchor | null = null;\n    if (scrollRef.current && scrollRef.current.contains(document.activeElement)) {\n      let anchorRect = document.activeElement?.getBoundingClientRect();\n      let scrollRect = scrollRef.current.getBoundingClientRect();\n      // Anchor from the top if the offset is in the top half of the scrollable element,\n      // otherwise anchor from the bottom.\n      anchor = {\n        type: 'top',\n        offset: (anchorRect?.top ?? 0) - scrollRect.top\n      };\n      if (anchor.offset > scrollRect.height / 2) {\n        anchor.type = 'bottom';\n        anchor.offset = (anchorRect?.bottom ?? 0) - scrollRect.bottom;\n      }\n    }\n\n    // Always reset the overlay's previous max height if not defined by the user so that we can compensate for\n    // RAC collections populating after a second render and properly set a correct max height + positioning when it populates.\n    let overlay = (overlayRef.current as HTMLElement);\n    if (!maxHeight && overlayRef.current) {\n      overlay.style.top = '0px';\n      overlay.style.bottom = '';\n      overlay.style.maxHeight = (window.visualViewport?.height ?? window.innerHeight) + 'px';\n    }\n\n    let position = calculatePosition({\n      placement: translateRTL(placement, direction),\n      overlayNode: overlayRef.current,\n      targetNode: targetRef.current,\n      scrollNode: scrollRef.current || overlayRef.current,\n      padding: containerPadding,\n      shouldFlip,\n      boundaryElement,\n      offset,\n      crossOffset,\n      maxHeight,\n      arrowSize: arrowSize ?? (arrowRef?.current ? getRect(arrowRef.current, true).width : 0),\n      arrowBoundaryOffset\n    });\n\n    if (!position.position) {\n      return;\n    }\n\n    // Modify overlay styles directly so positioning happens immediately without the need of a second render\n    // This is so we don't have to delay autoFocus scrolling or delay applying preventScroll for popovers\n    overlay.style.top = '';\n    overlay.style.bottom = '';\n    overlay.style.left = '';\n    overlay.style.right = '';\n\n    Object.keys(position.position).forEach(key => overlay.style[key] = (position.position!)[key] + 'px');\n    overlay.style.maxHeight = position.maxHeight != null ?  position.maxHeight + 'px' : '';\n\n    // Restore scroll position relative to anchor element.\n    if (anchor && document.activeElement && scrollRef.current) {\n      let anchorRect = document.activeElement.getBoundingClientRect();\n      let scrollRect = scrollRef.current.getBoundingClientRect();\n      let newOffset = anchorRect[anchor.type] - scrollRect[anchor.type];\n      scrollRef.current.scrollTop += newOffset - anchor.offset;\n    }\n\n    // Trigger a set state for a second render anyway for arrow positioning\n    setPosition(position);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  // Update position when anything changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(updatePosition, deps);\n\n  // Update position on window resize\n  useResize(updatePosition);\n\n  // Update position when the overlay changes size (might need to flip).\n  useResizeObserver({\n    ref: overlayRef,\n    onResize: updatePosition\n  });\n\n  // Update position when the target changes size (might need to flip).\n  useResizeObserver({\n    ref: targetRef,\n    onResize: updatePosition\n  });\n\n  // Reposition the overlay and do not close on scroll while the visual viewport is resizing.\n  // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.\n  let isResizing = useRef(false);\n  useLayoutEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>;\n    let onResize = () => {\n      isResizing.current = true;\n      clearTimeout(timeout);\n\n      timeout = setTimeout(() => {\n        isResizing.current = false;\n      }, 500);\n\n      updatePosition();\n    };\n\n    // Only reposition the overlay if a scroll event happens immediately as a result of resize (aka the virtual keyboard has appears)\n    // We don't want to reposition the overlay if the user has pinch zoomed in and is scrolling the viewport around.\n    let onScroll = () => {\n      if (isResizing.current) {\n        onResize();\n      }\n    };\n\n    visualViewport?.addEventListener('resize', onResize);\n    visualViewport?.addEventListener('scroll', onScroll);\n    return () => {\n      visualViewport?.removeEventListener('resize', onResize);\n      visualViewport?.removeEventListener('scroll', onScroll);\n    };\n  }, [updatePosition]);\n\n  let close = useCallback(() => {\n    if (!isResizing.current) {\n      onClose?.();\n    }\n  }, [onClose, isResizing]);\n\n  // When scrolling a parent scrollable region of the trigger (other than the body),\n  // we hide the popover. Otherwise, its position would be incorrect.\n  useCloseOnScroll({\n    triggerRef: targetRef,\n    isOpen,\n    onClose: onClose && close\n  });\n\n  return {\n    overlayProps: {\n      style: {\n        position: position ? 'absolute' : 'fixed',\n        top: !position ? 0 : undefined,\n        left: !position ? 0 : undefined,\n        zIndex: 100000, // should match the z-index in ModalTrigger\n        ...position?.position,\n        maxHeight: position?.maxHeight ?? '100vh'\n      }\n    },\n    placement: position?.placement ?? null,\n    triggerAnchorPoint: position?.triggerAnchorPoint ?? null,\n    arrowProps: {\n      'aria-hidden': 'true',\n      role: 'presentation',\n      style: {\n        left: position?.arrowOffsetLeft,\n        top: position?.arrowOffsetTop\n      }\n    },\n    updatePosition\n  };\n}\n\nfunction useResize(onResize) {\n  useLayoutEffect(() => {\n    window.addEventListener('resize', onResize, false);\n    return () => {\n      window.removeEventListener('resize', onResize, false);\n    };\n  }, [onResize]);\n}\n\nfunction translateRTL(position, direction) {\n  if (direction === 'rtl') {\n    return position.replace('start', 'right').replace('end', 'left');\n  }\n  return position.replace('start', 'left').replace('end', 'right');\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;AAqFA,IAAIA,oCAAA,GAAiB,OAAOC,QAAA,KAAa,cAAcC,MAAA,CAAOC,cAAc,GAAG;AAMxE,SAASC,0CAAmBC,KAAwB;EACzD,IAAI;IAAAC,SAAA,EAACA;EAAS,CAAC,GAAG,IAAAC,gBAAQ;EAC1B,IAAI;IAAAC,SAAA,EACFA,SAAS;IAAAC,SAAA,EACTA,SAAS;IAAAC,UAAA,EACTA,UAAU;IAAAC,QAAA,EACVA,QAAQ;IACRC,SAAA,GAAYF,UAAA;IACZG,SAAA,GAAY;IACZC,gBAAA,GAAmB;IACnBC,UAAA,GAAa;IACbC,eAAA,GAAkB,OAAOf,QAAA,KAAa,cAAcA,QAAA,CAASgB,IAAI,GAAG;IACpEC,MAAA,GAAS;IACTC,WAAA,GAAc;IACdC,oBAAA,GAAuB;IACvBC,MAAA,GAAS;IAAAC,OAAA,EACTA,OAAO;IAAAC,SAAA,EACPA,SAAS;IACTC,mBAAA,GAAsB;EAAA,CACvB,GAAGnB,KAAA;EACJ,IAAI,CAACoB,QAAA,EAAUC,WAAA,CAAY,GAAG,IAAAC,eAAO,EAAyB;EAE9D,IAAIC,IAAA,GAAO,CACTR,oBAAA,EACAP,SAAA,EACAH,UAAA,CAAWmB,OAAO,EAClBpB,SAAA,CAAUoB,OAAO,EACjBlB,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAUkB,OAAO,EACjBjB,SAAA,CAAUiB,OAAO,EACjBf,gBAAA,EACAC,UAAA,EACAC,eAAA,EACAE,MAAA,EACAC,WAAA,EACAE,MAAA,EACAf,SAAA,EACAiB,SAAA,EACAC,mBAAA,EACAhB,SAAA,CACD;EAED;EACA;EACA;EACA,IAAIsB,SAAA,GAAY,IAAAC,aAAK,EAAE/B,oCAAA,aAAAA,oCAAA,uBAAAA,oCAAA,CAAgBgC,KAAK;EAC5C,IAAAC,gBAAQ,EAAE;IACR,IAAIZ,MAAA,EACFS,SAAA,CAAUD,OAAO,GAAG7B,oCAAA,aAAAA,oCAAA,uBAAAA,oCAAA,CAAgBgC,KAAK;EAE7C,GAAG,CAACX,MAAA,CAAO;EAEX,IAAIa,cAAA,GAAiB,IAAAC,kBAAU,EAAE;IAC/B,IAAIf,oBAAA,KAAyB,SAAS,CAACC,MAAA,IAAU,CAACX,UAAA,CAAWmB,OAAO,IAAI,CAACpB,SAAA,CAAUoB,OAAO,IAAI,CAACb,eAAA,EAC7F;IAGF,IAAI,CAAAhB,oCAAA,aAAAA,oCAAA,uBAAAA,oCAAA,CAAgBgC,KAAK,MAAKF,SAAA,CAAUD,OAAO,EAC7C;IAGF;IACA;IACA;IACA;IACA,IAAIO,MAAA,GAA8B;IAClC,IAAIxB,SAAA,CAAUiB,OAAO,IAAIjB,SAAA,CAAUiB,OAAO,CAACQ,QAAQ,CAACpC,QAAA,CAASqC,aAAa,GAAG;UAC1DC,uBAAA;MAAjB,IAAIC,UAAA,IAAaD,uBAAA,GAAAtC,QAAA,CAASqC,aAAa,cAAtBC,uBAAA,uBAAAA,uBAAA,CAAwBE,qBAAqB;MAC9D,IAAIC,UAAA,GAAa9B,SAAA,CAAUiB,OAAO,CAACY,qBAAqB;UAK7CE,eAAA;MAJX;MACA;MACAP,MAAA,GAAS;QACPQ,IAAA,EAAM;QACN1B,MAAA,EAAQ,CAAC,CAAAyB,eAAA,GAAAH,UAAA,aAAAA,UAAA,uBAAAA,UAAA,CAAYK,GAAG,cAAfF,eAAA,cAAAA,eAAA,GAAmB,KAAKD,UAAA,CAAWG;MAC9C;MACA,IAAIT,MAAA,CAAOlB,MAAM,GAAGwB,UAAA,CAAWI,MAAM,GAAG,GAAG;QACzCV,MAAA,CAAOQ,IAAI,GAAG;YACGG,kBAAA;QAAjBX,MAAA,CAAOlB,MAAM,GAAG,CAAC,CAAA6B,kBAAA,GAAAP,UAAA,aAAAA,UAAA,uBAAAA,UAAA,CAAYQ,MAAM,cAAlBD,kBAAA,cAAAA,kBAAA,GAAsB,KAAKL,UAAA,CAAWM,MAAM;MAC/D;IACF;IAEA;IACA;IACA,IAAIC,OAAA,GAAWvC,UAAA,CAAWmB,OAAO;IACjC,IAAI,CAACN,SAAA,IAAab,UAAA,CAAWmB,OAAO,EAAE;UAGTqB,sBAAA;MAF3BD,OAAA,CAAQE,KAAK,CAACN,GAAG,GAAG;MACpBI,OAAA,CAAQE,KAAK,CAACH,MAAM,GAAG;UACII,6BAAA;MAA3BH,OAAA,CAAQE,KAAK,CAAC5B,SAAS,GAAG,CAAC,CAAA6B,6BAAA,IAAAF,sBAAA,GAAAhD,MAAA,CAAOC,cAAc,cAArB+C,sBAAA,uBAAAA,sBAAA,CAAuBJ,MAAM,cAA7BM,6BAAA,cAAAA,6BAAA,GAAiClD,MAAA,CAAOmD,WAAW,IAAI;IACpF;IAEA,IAAI5B,QAAA,GAAW,IAAA6B,yCAAgB,EAAE;MAC/BzC,SAAA,EAAW0C,kCAAA,CAAa1C,SAAA,EAAWP,SAAA;MACnCkD,WAAA,EAAa9C,UAAA,CAAWmB,OAAO;MAC/B4B,UAAA,EAAYhD,SAAA,CAAUoB,OAAO;MAC7B6B,UAAA,EAAY9C,SAAA,CAAUiB,OAAO,IAAInB,UAAA,CAAWmB,OAAO;MACnD8B,OAAA,EAAS7C,gBAAA;kBACTC,UAAA;uBACAC,eAAA;cACAE,MAAA;mBACAC,WAAA;iBACAI,SAAA;MACAf,SAAA,EAAWA,SAAA,aAAAA,SAAA,cAAAA,SAAA,GAAc,CAAAG,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAUkB,OAAO,IAAG,IAAA+B,yCAAM,EAAEjD,QAAA,CAASkB,OAAO,EAAE,MAAMgC,KAAK,GAAG;2BACrFrC;IACF;IAEA,IAAI,CAACC,QAAA,CAASA,QAAQ,EACpB;IAGF;IACA;IACAwB,OAAA,CAAQE,KAAK,CAACN,GAAG,GAAG;IACpBI,OAAA,CAAQE,KAAK,CAACH,MAAM,GAAG;IACvBC,OAAA,CAAQE,KAAK,CAACW,IAAI,GAAG;IACrBb,OAAA,CAAQE,KAAK,CAACY,KAAK,GAAG;IAEtBC,MAAA,CAAOC,IAAI,CAACxC,QAAA,CAASA,QAAQ,EAAEyC,OAAO,CAACC,GAAA,IAAOlB,OAAA,CAAQE,KAAK,CAACgB,GAAA,CAAI,GAAG1C,QAAC,CAASA,QAAQ,CAAG0C,GAAA,CAAI,GAAG;IAC/FlB,OAAA,CAAQE,KAAK,CAAC5B,SAAS,GAAGE,QAAA,CAASF,SAAS,IAAI,OAAQE,QAAA,CAASF,SAAS,GAAG,OAAO;IAEpF;IACA,IAAIa,MAAA,IAAUnC,QAAA,CAASqC,aAAa,IAAI1B,SAAA,CAAUiB,OAAO,EAAE;MACzD,IAAIW,UAAA,GAAavC,QAAA,CAASqC,aAAa,CAACG,qBAAqB;MAC7D,IAAIC,UAAA,GAAa9B,SAAA,CAAUiB,OAAO,CAACY,qBAAqB;MACxD,IAAI2B,SAAA,GAAY5B,UAAU,CAACJ,MAAA,CAAOQ,IAAI,CAAC,GAAGF,UAAU,CAACN,MAAA,CAAOQ,IAAI,CAAC;MACjEhC,SAAA,CAAUiB,OAAO,CAACwC,SAAS,IAAID,SAAA,GAAYhC,MAAA,CAAOlB,MAAM;IAC1D;IAEA;IACAQ,WAAA,CAAYD,QAAA;IACd;EACA,GAAGG,IAAA;EAEH;EACA;EACA,IAAA0C,sBAAc,EAAEpC,cAAA,EAAgBN,IAAA;EAEhC;EACA2C,+BAAA,CAAUrC,cAAA;EAEV;EACA,IAAAsC,wBAAgB,EAAE;IAChBC,GAAA,EAAK/D,UAAA;IACLgE,QAAA,EAAUxC;EACZ;EAEA;EACA,IAAAsC,wBAAgB,EAAE;IAChBC,GAAA,EAAKhE,SAAA;IACLiE,QAAA,EAAUxC;EACZ;EAEA;EACA;EACA,IAAIyC,UAAA,GAAa,IAAA5C,aAAK,EAAE;EACxB,IAAAuC,sBAAc,EAAE;IACd,IAAIM,OAAA;IACJ,IAAIF,QAAA,GAAWA,CAAA;MACbC,UAAA,CAAW9C,OAAO,GAAG;MACrBgD,YAAA,CAAaD,OAAA;MAEbA,OAAA,GAAUE,UAAA,CAAW;QACnBH,UAAA,CAAW9C,OAAO,GAAG;MACvB,GAAG;MAEHK,cAAA;IACF;IAEA;IACA;IACA,IAAI6C,QAAA,GAAWA,CAAA;MACb,IAAIJ,UAAA,CAAW9C,OAAO,EACpB6C,QAAA;IAEJ;IAEA1E,oCAAA,aAAAA,oCAAA,uBAAAA,oCAAA,CAAgBgF,gBAAgB,CAAC,UAAUN,QAAA;IAC3C1E,oCAAA,aAAAA,oCAAA,uBAAAA,oCAAA,CAAgBgF,gBAAgB,CAAC,UAAUD,QAAA;IAC3C,OAAO;MACL/E,oCAAA,aAAAA,oCAAA,uBAAAA,oCAAA,CAAgBiF,mBAAmB,CAAC,UAAUP,QAAA;MAC9C1E,oCAAA,aAAAA,oCAAA,uBAAAA,oCAAA,CAAgBiF,mBAAmB,CAAC,UAAUF,QAAA;IAChD;EACF,GAAG,CAAC7C,cAAA,CAAe;EAEnB,IAAIgD,KAAA,GAAQ,IAAA/C,kBAAU,EAAE;IACtB,IAAI,CAACwC,UAAA,CAAW9C,OAAO,EACrBP,OAAA,aAAAA,OAAA,uBAAAA,OAAA;EAEJ,GAAG,CAACA,OAAA,EAASqD,UAAA,CAAW;EAExB;EACA;EACA,IAAAQ,yCAAe,EAAE;IACfC,UAAA,EAAY3E,SAAA;YACZY,MAAA;IACAC,OAAA,EAASA,OAAA,IAAW4D;EACtB;MAUiBG,mBAAA,EAGJC,mBAAA,EACSC,4BAAA;EAZtB,OAAO;IACLC,YAAA,EAAc;MACZrC,KAAA,EAAO;QACL1B,QAAA,EAAUA,QAAA,GAAW,aAAa;QAClCoB,GAAA,EAAK,CAACpB,QAAA,GAAW,IAAIgE,SAAA;QACrB3B,IAAA,EAAM,CAACrC,QAAA,GAAW,IAAIgE,SAAA;QACtBC,MAAA,EAAQ;YACLjE,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAUA,QAAQ;QACrBF,SAAA,EAAW,CAAA8D,mBAAA,GAAA5D,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAUF,SAAS,cAAnB8D,mBAAA,cAAAA,mBAAA,GAAuB;MACpC;IACF;IACAxE,SAAA,EAAW,CAAAyE,mBAAA,GAAA7D,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAUZ,SAAS,cAAnByE,mBAAA,cAAAA,mBAAA,GAAuB;IAClCK,kBAAA,EAAoB,CAAAJ,4BAAA,GAAA9D,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAUkE,kBAAkB,cAA5BJ,4BAAA,cAAAA,4BAAA,GAAgC;IACpDK,UAAA,EAAY;MACV,eAAe;MACfC,IAAA,EAAM;MACN1C,KAAA,EAAO;QACLW,IAAI,EAAErC,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAUqE,eAAe;QAC/BjD,GAAG,EAAEpB,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAUsE;MACjB;IACF;oBACA7D;EACF;AACF;AAEA,SAASqC,gCAAUG,QAAQ;EACzB,IAAAJ,sBAAc,EAAE;IACdpE,MAAA,CAAO8E,gBAAgB,CAAC,UAAUN,QAAA,EAAU;IAC5C,OAAO;MACLxE,MAAA,CAAO+E,mBAAmB,CAAC,UAAUP,QAAA,EAAU;IACjD;EACF,GAAG,CAACA,QAAA,CAAS;AACf;AAEA,SAASnB,mCAAa9B,QAAQ,EAAEnB,SAAS;EACvC,IAAIA,SAAA,KAAc,OAChB,OAAOmB,QAAA,CAASuE,OAAO,CAAC,SAAS,SAASA,OAAO,CAAC,OAAO;EAE3D,OAAOvE,QAAA,CAASuE,OAAO,CAAC,SAAS,QAAQA,OAAO,CAAC,OAAO;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}