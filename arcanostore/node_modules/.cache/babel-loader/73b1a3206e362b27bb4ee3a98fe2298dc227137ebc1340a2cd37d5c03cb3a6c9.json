{"ast":null,"code":"import { useSingleSelectListState as $fgY1A$useSingleSelectListState } from \"@react-stately/list\";\nimport { useRef as $fgY1A$useRef, useEffect as $fgY1A$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $76f919a04c5a7d14$export$4ba071daf4e486(props) {\n  var _props_defaultSelectedKey, _ref;\n  let state = (0, $fgY1A$useSingleSelectListState)({\n    ...props,\n    onSelectionChange: props.onSelectionChange ? key => {\n      var _props_onSelectionChange;\n      if (key != null) (_props_onSelectionChange = props.onSelectionChange) === null || _props_onSelectionChange === void 0 ? void 0 : _props_onSelectionChange.call(props, key);\n    } : undefined,\n    suppressTextValueWarning: true,\n    defaultSelectedKey: (_ref = (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : $76f919a04c5a7d14$var$findDefaultSelectedKey(props.collection, props.disabledKeys ? new Set(props.disabledKeys) : new Set())) !== null && _ref !== void 0 ? _ref : undefined\n  });\n  let {\n    selectionManager: selectionManager,\n    collection: collection,\n    selectedKey: currentSelectedKey\n  } = state;\n  let lastSelectedKey = (0, $fgY1A$useRef)(currentSelectedKey);\n  (0, $fgY1A$useEffect)(() => {\n    // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n    let selectedKey = currentSelectedKey;\n    if (props.selectedKey == null && (selectionManager.isEmpty || selectedKey == null || !collection.getItem(selectedKey))) {\n      selectedKey = $76f919a04c5a7d14$var$findDefaultSelectedKey(collection, state.disabledKeys);\n      if (selectedKey != null)\n        // directly set selection because replace/toggle selection won't consider disabled keys\n        selectionManager.setSelectedKeys([selectedKey]);\n    }\n    // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.\n    if (selectedKey != null && selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current) selectionManager.setFocusedKey(selectedKey);\n    lastSelectedKey.current = selectedKey;\n  });\n  return {\n    ...state,\n    isDisabled: props.isDisabled || false\n  };\n}\nfunction $76f919a04c5a7d14$var$findDefaultSelectedKey(collection, disabledKeys) {\n  let selectedKey = null;\n  if (collection) {\n    var _collection_getItem_props, _collection_getItem, _collection_getItem_props1, _collection_getItem1;\n    selectedKey = collection.getFirstKey();\n    // loop over tabs until we find one that isn't disabled and select that\n    while (selectedKey != null && (disabledKeys.has(selectedKey) || ((_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : (_collection_getItem_props = _collection_getItem.props) === null || _collection_getItem_props === void 0 ? void 0 : _collection_getItem_props.isDisabled)) && selectedKey !== collection.getLastKey()) selectedKey = collection.getKeyAfter(selectedKey);\n    // if this check is true, then every item is disabled, it makes more sense to default to the first key than the last\n    if (selectedKey != null && (disabledKeys.has(selectedKey) || ((_collection_getItem1 = collection.getItem(selectedKey)) === null || _collection_getItem1 === void 0 ? void 0 : (_collection_getItem_props1 = _collection_getItem1.props) === null || _collection_getItem_props1 === void 0 ? void 0 : _collection_getItem_props1.isDisabled)) && selectedKey === collection.getLastKey()) selectedKey = collection.getFirstKey();\n  }\n  return selectedKey;\n}\nexport { $76f919a04c5a7d14$export$4ba071daf4e486 as useTabListState };","map":{"version":3,"names":["$76f919a04c5a7d14$export$4ba071daf4e486","props","_props_defaultSelectedKey","_ref","state","$fgY1A$useSingleSelectListState","onSelectionChange","key","_props_onSelectionChange","call","undefined","suppressTextValueWarning","defaultSelectedKey","$76f919a04c5a7d14$var$findDefaultSelectedKey","collection","disabledKeys","Set","selectionManager","selectedKey","currentSelectedKey","lastSelectedKey","$fgY1A$useRef","$fgY1A$useEffect","isEmpty","getItem","setSelectedKeys","focusedKey","isFocused","current","setFocusedKey","isDisabled","_collection_getItem_props","_collection_getItem","_collection_getItem_props1","_collection_getItem1","getFirstKey","has","getLastKey","getKeyAfter"],"sources":["C:\\Users\\Aluno\\Documents\\GitHub\\--Arcano_Store--\\arcanostore\\node_modules\\@react-stately\\tabs\\dist\\packages\\@react-stately\\tabs\\src\\useTabListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionStateBase, Key, Node} from '@react-types/shared';\nimport {SingleSelectListState, useSingleSelectListState} from '@react-stately/list';\nimport {TabListProps} from '@react-types/tabs';\nimport {useEffect, useRef} from 'react';\n\nexport interface TabListStateOptions<T> extends Omit<TabListProps<T>, 'children'>, CollectionStateBase<T> {}\n\nexport interface TabListState<T> extends SingleSelectListState<T> {\n  /** Whether the tab list is disabled. */\n  isDisabled: boolean\n}\n\n/**\n * Provides state management for a Tabs component. Tabs include a TabList which tracks\n * which tab is currently selected and displays the content associated with that Tab in a TabPanel.\n */\nexport function useTabListState<T extends object>(props: TabListStateOptions<T>): TabListState<T> {\n  let state = useSingleSelectListState<T>({\n    ...props,\n    onSelectionChange: props.onSelectionChange ? (key => {\n      if (key != null) {\n        props.onSelectionChange?.(key);\n      }\n    }) : undefined,\n    suppressTextValueWarning: true,\n    defaultSelectedKey: props.defaultSelectedKey ?? findDefaultSelectedKey(props.collection, props.disabledKeys ? new Set(props.disabledKeys) : new Set()) ?? undefined\n  });\n\n  let {\n    selectionManager,\n    collection,\n    selectedKey: currentSelectedKey\n  } = state;\n\n  let lastSelectedKey = useRef(currentSelectedKey);\n  useEffect(() => {\n    // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n    let selectedKey = currentSelectedKey;\n    if (props.selectedKey == null && (selectionManager.isEmpty || selectedKey == null || !collection.getItem(selectedKey))) {\n      selectedKey = findDefaultSelectedKey(collection, state.disabledKeys);\n      if (selectedKey != null) {\n        // directly set selection because replace/toggle selection won't consider disabled keys\n        selectionManager.setSelectedKeys([selectedKey]);\n      }\n    }\n\n    // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.\n    if (selectedKey != null && selectionManager.focusedKey == null || (!selectionManager.isFocused && selectedKey !== lastSelectedKey.current)) {\n      selectionManager.setFocusedKey(selectedKey);\n    }\n    lastSelectedKey.current = selectedKey;\n  });\n\n  return {\n    ...state,\n    isDisabled: props.isDisabled || false\n  };\n}\n\nfunction findDefaultSelectedKey<T>(collection: Collection<Node<T>> | undefined, disabledKeys: Set<Key>) {\n  let selectedKey: Key | null = null;\n  if (collection) {\n    selectedKey = collection.getFirstKey();\n    // loop over tabs until we find one that isn't disabled and select that\n    while (selectedKey != null && (disabledKeys.has(selectedKey) || collection.getItem(selectedKey)?.props?.isDisabled) && selectedKey !== collection.getLastKey()) {\n      selectedKey = collection.getKeyAfter(selectedKey);\n    }\n    // if this check is true, then every item is disabled, it makes more sense to default to the first key than the last\n    if (selectedKey != null && (disabledKeys.has(selectedKey) || collection.getItem(selectedKey)?.props?.isDisabled) && selectedKey === collection.getLastKey()) {\n      selectedKey = collection.getFirstKey();\n    }\n  }\n\n  return selectedKey;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}