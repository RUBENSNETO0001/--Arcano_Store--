{"ast":null,"code":"import { getOwnerWindow as $fF94N$getOwnerWindow } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nconst $5e3802645cc19319$var$supportsInert = typeof HTMLElement !== 'undefined' && 'inert' in HTMLElement.prototype;\n// Keeps a ref count of all hidden elements. Added to when hiding an element, and\n// subtracted from when showing it again. When it reaches zero, aria-hidden is removed.\nlet $5e3802645cc19319$var$refCountMap = new WeakMap();\nlet $5e3802645cc19319$var$observerStack = [];\nfunction $5e3802645cc19319$export$1c3ebcada18427bf(targets, options) {\n  let windowObj = (0, $fF94N$getOwnerWindow)(targets === null || targets === void 0 ? void 0 : targets[0]);\n  let opts = options instanceof windowObj.Element ? {\n    root: options\n  } : options;\n  var _opts_root;\n  let root = (_opts_root = opts === null || opts === void 0 ? void 0 : opts.root) !== null && _opts_root !== void 0 ? _opts_root : document.body;\n  let shouldUseInert = (opts === null || opts === void 0 ? void 0 : opts.shouldUseInert) && $5e3802645cc19319$var$supportsInert;\n  let visibleNodes = new Set(targets);\n  let hiddenNodes = new Set();\n  let getHidden = element => {\n    return shouldUseInert && element instanceof windowObj.HTMLElement ? element.inert : element.getAttribute('aria-hidden') === 'true';\n  };\n  let setHidden = (element, hidden) => {\n    if (shouldUseInert && element instanceof windowObj.HTMLElement) element.inert = hidden;else if (hidden) element.setAttribute('aria-hidden', 'true');else {\n      element.removeAttribute('aria-hidden');\n      if (element instanceof windowObj.HTMLElement)\n        // We only ever call setHidden with hidden = false when the nodeCount is 1 aka\n        // we are trying to make the element visible to screen readers again, so remove inert as well\n        element.inert = false;\n    }\n  };\n  let walk = root => {\n    // Keep live announcer and top layer elements (e.g. toasts) visible.\n    for (let element of root.querySelectorAll('[data-live-announcer], [data-react-aria-top-layer]')) visibleNodes.add(element);\n    let acceptNode = node => {\n      // Skip this node and its children if it is one of the target nodes, or a live announcer.\n      // Also skip children of already hidden nodes, as aria-hidden is recursive. An exception is\n      // made for elements with role=\"row\" since VoiceOver on iOS has issues hiding elements with role=\"row\".\n      // For that case we want to hide the cells inside as well (https://bugs.webkit.org/show_bug.cgi?id=222623).\n      if (hiddenNodes.has(node) || visibleNodes.has(node) || node.parentElement && hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute('role') !== 'row') return NodeFilter.FILTER_REJECT;\n      // Skip this node but continue to children if one of the targets is inside the node.\n      for (let target of visibleNodes) {\n        if (node.contains(target)) return NodeFilter.FILTER_SKIP;\n      }\n      return NodeFilter.FILTER_ACCEPT;\n    };\n    let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n      acceptNode: acceptNode\n    });\n    // TreeWalker does not include the root.\n    let acceptRoot = acceptNode(root);\n    if (acceptRoot === NodeFilter.FILTER_ACCEPT) hide(root);\n    if (acceptRoot !== NodeFilter.FILTER_REJECT) {\n      let node = walker.nextNode();\n      while (node != null) {\n        hide(node);\n        node = walker.nextNode();\n      }\n    }\n  };\n  let hide = node => {\n    var _refCountMap_get;\n    let refCount = (_refCountMap_get = $5e3802645cc19319$var$refCountMap.get(node)) !== null && _refCountMap_get !== void 0 ? _refCountMap_get : 0;\n    // If already aria-hidden, and the ref count is zero, then this element\n    // was already hidden and there's nothing for us to do.\n    if (getHidden(node) && refCount === 0) return;\n    if (refCount === 0) setHidden(node, true);\n    hiddenNodes.add(node);\n    $5e3802645cc19319$var$refCountMap.set(node, refCount + 1);\n  };\n  // If there is already a MutationObserver listening from a previous call,\n  // disconnect it so the new on takes over.\n  if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].disconnect();\n  walk(root);\n  let observer = new MutationObserver(changes => {\n    for (let change of changes) {\n      if (change.type !== 'childList') continue;\n      // If the parent element of the added nodes is not within one of the targets,\n      // and not already inside a hidden node, hide all of the new children.\n      if (![...visibleNodes, ...hiddenNodes].some(node => node.contains(change.target))) for (let node of change.addedNodes) {\n        if ((node instanceof HTMLElement || node instanceof SVGElement) && (node.dataset.liveAnnouncer === 'true' || node.dataset.reactAriaTopLayer === 'true')) visibleNodes.add(node);else if (node instanceof Element) walk(node);\n      }\n    }\n  });\n  observer.observe(root, {\n    childList: true,\n    subtree: true\n  });\n  let observerWrapper = {\n    visibleNodes: visibleNodes,\n    hiddenNodes: hiddenNodes,\n    observe() {\n      observer.observe(root, {\n        childList: true,\n        subtree: true\n      });\n    },\n    disconnect() {\n      observer.disconnect();\n    }\n  };\n  $5e3802645cc19319$var$observerStack.push(observerWrapper);\n  return () => {\n    observer.disconnect();\n    for (let node of hiddenNodes) {\n      let count = $5e3802645cc19319$var$refCountMap.get(node);\n      if (count == null) continue;\n      if (count === 1) {\n        setHidden(node, false);\n        $5e3802645cc19319$var$refCountMap.delete(node);\n      } else $5e3802645cc19319$var$refCountMap.set(node, count - 1);\n    }\n    // Remove this observer from the stack, and start the previous one.\n    if (observerWrapper === $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1]) {\n      $5e3802645cc19319$var$observerStack.pop();\n      if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].observe();\n    } else $5e3802645cc19319$var$observerStack.splice($5e3802645cc19319$var$observerStack.indexOf(observerWrapper), 1);\n  };\n}\nfunction $5e3802645cc19319$export$1020fa7f77e17884(element) {\n  let observer = $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1];\n  if (observer && !observer.visibleNodes.has(element)) {\n    observer.visibleNodes.add(element);\n    return () => {\n      observer.visibleNodes.delete(element);\n    };\n  }\n}\nexport { $5e3802645cc19319$export$1c3ebcada18427bf as ariaHideOutside, $5e3802645cc19319$export$1020fa7f77e17884 as keepVisible };","map":{"version":3,"names":["$5e3802645cc19319$var$supportsInert","HTMLElement","prototype","$5e3802645cc19319$var$refCountMap","WeakMap","$5e3802645cc19319$var$observerStack","$5e3802645cc19319$export$1c3ebcada18427bf","targets","options","windowObj","$fF94N$getOwnerWindow","opts","Element","root","_opts_root","document","body","shouldUseInert","visibleNodes","Set","hiddenNodes","getHidden","element","inert","getAttribute","setHidden","hidden","setAttribute","removeAttribute","walk","querySelectorAll","add","acceptNode","node","has","parentElement","NodeFilter","FILTER_REJECT","target","contains","FILTER_SKIP","FILTER_ACCEPT","walker","createTreeWalker","SHOW_ELEMENT","acceptRoot","hide","nextNode","_refCountMap_get","refCount","get","set","length","disconnect","observer","MutationObserver","changes","change","type","some","addedNodes","SVGElement","dataset","liveAnnouncer","reactAriaTopLayer","observe","childList","subtree","observerWrapper","push","count","delete","pop","splice","indexOf","$5e3802645cc19319$export$1020fa7f77e17884"],"sources":["C:\\Users\\Aluno\\Documents\\GitHub\\--Arcano_Store--\\arcanostore\\node_modules\\@react-aria\\menu\\node_modules\\@react-aria\\overlays\\dist\\packages\\@react-aria\\overlays\\src\\ariaHideOutside.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getOwnerWindow} from '@react-aria/utils';\nconst supportsInert = typeof HTMLElement !== 'undefined' && 'inert' in HTMLElement.prototype;\n\ninterface AriaHideOutsideOptions {\n  root?: Element,\n  shouldUseInert?: boolean\n}\n\n// Keeps a ref count of all hidden elements. Added to when hiding an element, and\n// subtracted from when showing it again. When it reaches zero, aria-hidden is removed.\nlet refCountMap = new WeakMap<Element, number>();\ninterface ObserverWrapper {\n  visibleNodes: Set<Element>,\n  hiddenNodes: Set<Element>,\n  observe: () => void,\n  disconnect: () => void\n}\nlet observerStack: Array<ObserverWrapper> = [];\n\n/**\n * Hides all elements in the DOM outside the given targets from screen readers using aria-hidden,\n * and returns a function to revert these changes. In addition, changes to the DOM are watched\n * and new elements outside the targets are automatically hidden.\n * @param targets - The elements that should remain visible.\n * @param root - Nothing will be hidden above this element.\n * @returns - A function to restore all hidden elements.\n */\nexport function ariaHideOutside(targets: Element[], options?: AriaHideOutsideOptions | Element) {\n  let windowObj = getOwnerWindow(targets?.[0]);\n  let opts = options instanceof windowObj.Element ? {root: options} : options;\n  let root = opts?.root ?? document.body;\n  let shouldUseInert = opts?.shouldUseInert && supportsInert;\n  let visibleNodes = new Set<Element>(targets);\n  let hiddenNodes = new Set<Element>();\n\n  let getHidden = (element: Element) => {\n    return shouldUseInert && element instanceof windowObj.HTMLElement ? element.inert : element.getAttribute('aria-hidden') === 'true';\n  };\n\n  let setHidden = (element: Element, hidden: boolean) => {\n    if (shouldUseInert && element instanceof windowObj.HTMLElement) {\n      element.inert = hidden;\n    } else if (hidden) {\n      element.setAttribute('aria-hidden', 'true');\n    } else {\n      element.removeAttribute('aria-hidden');\n      if (element instanceof windowObj.HTMLElement) {\n        // We only ever call setHidden with hidden = false when the nodeCount is 1 aka\n        // we are trying to make the element visible to screen readers again, so remove inert as well\n        element.inert = false;\n      }\n    }\n  };\n\n  let walk = (root: Element) => {\n    // Keep live announcer and top layer elements (e.g. toasts) visible.\n    for (let element of root.querySelectorAll('[data-live-announcer], [data-react-aria-top-layer]')) {\n      visibleNodes.add(element);\n    }\n\n    let acceptNode = (node: Element) => {\n      // Skip this node and its children if it is one of the target nodes, or a live announcer.\n      // Also skip children of already hidden nodes, as aria-hidden is recursive. An exception is\n      // made for elements with role=\"row\" since VoiceOver on iOS has issues hiding elements with role=\"row\".\n      // For that case we want to hide the cells inside as well (https://bugs.webkit.org/show_bug.cgi?id=222623).\n      if (\n        hiddenNodes.has(node) ||\n        visibleNodes.has(node) ||\n        (node.parentElement && hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute('role') !== 'row')\n      ) {\n        return NodeFilter.FILTER_REJECT;\n      }\n\n      // Skip this node but continue to children if one of the targets is inside the node.\n      for (let target of visibleNodes) {\n        if (node.contains(target)) {\n          return NodeFilter.FILTER_SKIP;\n        }\n      }\n\n      return NodeFilter.FILTER_ACCEPT;\n    };\n\n    let walker = document.createTreeWalker(\n      root,\n      NodeFilter.SHOW_ELEMENT,\n      {acceptNode}\n    );\n\n    // TreeWalker does not include the root.\n    let acceptRoot = acceptNode(root);\n    if (acceptRoot === NodeFilter.FILTER_ACCEPT) {\n      hide(root);\n    }\n\n    if (acceptRoot !== NodeFilter.FILTER_REJECT) {\n      let node = walker.nextNode() as Element;\n      while (node != null) {\n        hide(node);\n        node = walker.nextNode() as Element;\n      }\n    }\n  };\n\n  let hide = (node: Element) => {\n    let refCount = refCountMap.get(node) ?? 0;\n\n    // If already aria-hidden, and the ref count is zero, then this element\n    // was already hidden and there's nothing for us to do.\n    if (getHidden(node) && refCount === 0) {\n      return;\n    }\n\n    if (refCount === 0) {\n      setHidden(node, true);\n    }\n\n    hiddenNodes.add(node);\n    refCountMap.set(node, refCount + 1);\n  };\n\n  // If there is already a MutationObserver listening from a previous call,\n  // disconnect it so the new on takes over.\n  if (observerStack.length) {\n    observerStack[observerStack.length - 1].disconnect();\n  }\n\n  walk(root);\n\n  let observer = new MutationObserver(changes => {\n    for (let change of changes) {\n      if (change.type !== 'childList') {\n        continue;\n      }\n\n      // If the parent element of the added nodes is not within one of the targets,\n      // and not already inside a hidden node, hide all of the new children.\n      if (![...visibleNodes, ...hiddenNodes].some(node => node.contains(change.target))) {\n        for (let node of change.addedNodes) {\n          if (\n            (node instanceof HTMLElement || node instanceof SVGElement) &&\n            (node.dataset.liveAnnouncer === 'true' || node.dataset.reactAriaTopLayer === 'true')\n          ) {\n            visibleNodes.add(node);\n          } else if (node instanceof Element) {\n            walk(node);\n          }\n        }\n      }\n    }\n  });\n\n  observer.observe(root, {childList: true, subtree: true});\n\n  let observerWrapper: ObserverWrapper = {\n    visibleNodes,\n    hiddenNodes,\n    observe() {\n      observer.observe(root, {childList: true, subtree: true});\n    },\n    disconnect() {\n      observer.disconnect();\n    }\n  };\n\n  observerStack.push(observerWrapper);\n\n  return (): void => {\n    observer.disconnect();\n\n    for (let node of hiddenNodes) {\n      let count = refCountMap.get(node);\n      if (count == null) {\n        continue;\n      }\n      if (count === 1) {\n        setHidden(node, false);\n        refCountMap.delete(node);\n      } else {\n        refCountMap.set(node, count - 1);\n      }\n    }\n\n    // Remove this observer from the stack, and start the previous one.\n    if (observerWrapper === observerStack[observerStack.length - 1]) {\n      observerStack.pop();\n      if (observerStack.length) {\n        observerStack[observerStack.length - 1].observe();\n      }\n    } else {\n      observerStack.splice(observerStack.indexOf(observerWrapper), 1);\n    }\n  };\n}\n\nexport function keepVisible(element: Element): (() => void) | undefined {\n  let observer = observerStack[observerStack.length - 1];\n  if (observer && !observer.visibleNodes.has(element)) {\n    observer.visibleNodes.add(element);\n    return () => {\n      observer.visibleNodes.delete(element);\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}